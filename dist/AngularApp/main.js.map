{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/alert/alert.component.ts","./src/app/alert/alert.component.html","./src/app/alert/alert.types.dto.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dto/contact.dto.ts","./src/app/dto/crypto.dto.ts","./src/app/dto/event.dto.ts","./src/app/dto/flag.dto.ts","./src/app/dto/person.dto.ts","./src/app/dto/telephone.dto.ts","./src/app/event-table/event-table.component.ts","./src/app/event-table/event-table.component.html","./src/app/import-pool/import-pool.component.ts","./src/app/import-pool/import-pool.component.html","./src/app/login/devLoginDefaults.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/main-page/main-page.component.ts","./src/app/main-page/main-page.component.html","./src/app/main-page/pipes/search-pipe.pipe.ts","./src/app/main-page/search-event/search-event.component.ts","./src/app/main-page/search-event/search-event.component.html","./src/app/modalWindows/event-manager/event-manager.component.ts","./src/app/modalWindows/event-manager/event-manager.component.html","./src/app/modalWindows/import-export-manager/import-export-manager.component.ts","./src/app/modalWindows/import-export-manager/import-export-manager.component.html","./src/app/modalWindows/person-manager/person-manager.component.ts","./src/app/modalWindows/person-manager/person-manager.component.html","./src/app/modalWindows/search-manager/search-manager.component.ts","./src/app/modalWindows/search-manager/search-manager.component.html","./src/app/modules/routing/routing.module.ts","./src/app/options-bar/options-bar.component.ts","./src/app/options-bar/options-bar.component.html","./src/app/person-browser-card/person-browser-card.component.ts","./src/app/person-browser-card/person-browser-card.component.html","./src/app/pipes/json-keys.pipe.ts","./src/app/pipes/json-values.pipe.ts","./src/app/services/crypto-manager.service.ts","./src/app/services/event-table.service.ts","./src/app/services/import-pool.service.ts","./src/app/services/pg-services/pg-query.service.ts","./src/app/services/pg-services/pg.service.ts","./src/app/services/window-managers/alert-manager.service.ts","./src/app/services/window-managers/event-manager.service.ts","./src/app/services/window-managers/import-export.service.ts","./src/app/services/window-managers/person-manager.service.ts","./src/app/services/window-managers/search-manager.service.ts","./src/backend.conf.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAA6D;AACf;;AAOvC,MAAM,cAAc;IAMzB,YAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QAJlC,mBAAc,GAAW,2DAAU,CAAC,OAAO;QAC3C,gBAAW,GAAW,QAAQ;QAC9B,iBAAY,GAAW,SAAS;QAChC,qBAAgB,GAAG,IAAI;QAErB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa;QAC/B,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,QAAQ,KAAU,CAAC;IAEnB,QAAQ,CAAC,IAAY,EAAE,OAAe;QACpC,IAAI,CAAC,cAAc,GAAG,2DAAU,CAAC,IAAI;QACrC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;IAC/B,CAAC;IAED,WAAW,CAAC,IAAY,EAAE,OAAe;QACvC,IAAI,CAAC,cAAc,GAAG,2DAAU,CAAC,OAAO;QACxC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;IAC/B,CAAC;IAED,SAAS,CAAC,IAAY,EAAE,OAAe;QACrC,IAAI,CAAC,cAAc,GAAG,2DAAU,CAAC,KAAK;QACtC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;IAC/B,CAAC;IAED,SAAS,CAAC,IAAY,EAAE,OAAe;QACrC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI;QACvB,IAAI,CAAC,YAAY,GAAG,OAAO;QAC3B,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,UAAU,EAAE;QACnB,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC;IAC3B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;IACrC,CAAC;;4EAvCU,cAAc;8FAAd,cAAc;QCR3B,sEACE;QAAA,yEAAuD;QAAvB,mIAAS,gBAAY,IAAC;QAAC,4DAAC;QAAA,4DAAM;QAC9D,yEACE;QAAA,qEAAI;QAAA,uDAAiB;QAAA,4DAAK;QAC5B,4DAAM;QACN,yEACE;QAAA,oEAAG;QAAA,uDAAkB;QAAA,4DAAI;QAC3B,4DAAM;QACR,4DAAM;;QARD,gGAA4C;QAGzC,0DAAiB;QAAjB,gFAAiB;QAGlB,0DAAkB;QAAlB,iFAAkB;;6FDEZ,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEPD;AAAA;AAAO,MAAM,UAAU,GAAG;IACxB,KAAK,EAAE,OAAO;IACd,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,MAAM;CACb;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;;;;;;;;;;;;;;;;;;;;;;;;;;ICCnE,sEACE;IAAA,qFAKmB;IAJjB,wUAA8B;IAI/B,4DAAkB;IACrB,4DAAM;;ADoBC,MAAM,YAAY;IASvB,YACS,EAAa,EACb,EAAuB,EACvB,EAAwB,EACxB,EAAuB,EACvB,EAAuB,EACvB,EAAwB,EACxB,EAAqB;QANrB,OAAE,GAAF,EAAE,CAAW;QACb,OAAE,GAAF,EAAE,CAAqB;QACvB,OAAE,GAAF,EAAE,CAAsB;QACxB,OAAE,GAAF,EAAE,CAAqB;QACvB,OAAE,GAAF,EAAE,CAAqB;QACvB,OAAE,GAAF,EAAE,CAAsB;QACxB,OAAE,GAAF,EAAE,CAAmB;QAf9B,UAAK,GAAG,qBAAqB;IAgB1B,CAAC;IAEJ,eAAe;QACb,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY;QACrC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa;QACtC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;QAClC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK;QAC9B,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM;QAC/B,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU;IACrC,CAAC;IAED,gBAAgB;QACd,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ;YAAE,OAAO,IAAI;;YACnD,OAAO,KAAK;IACnB,CAAC;IAED,gBAAgB,CAAC,MAAe;QAC9B,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC;IAC5C,CAAC;IAED,YAAY;QACV,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE;IACrB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;IACtB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;IACtB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;IACtB,CAAC;;wEAnDU,YAAY;4FAAZ,YAAY;;;;;;;;;;;;;;;;QC5BzB,wEAAmB;QAAA,oJAAmB;QAAA,4DAAK;QAC3C,wGACE;QAOF,2FACqB;QADc,sKAAiB,4BAAwB,IAAC;QAC7E,4DAAqB;QACrB,gGAA6E;QAC7E,gFAA8B;QAC9B,yFAAyD;QACzD,uFAA+C;QAC/C,yFAAsD;QAEtD,4EAA+B;;QAhB1B,0DAA0B;QAA1B,wFAA0B;;6FD2BlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;owBAG4B,YAAY;kBAAtC,uDAAS;mBAAC,cAAc;YACG,aAAa;kBAAxC,uDAAS;mBAAC,eAAe;YACQ,SAAS;kBAA1C,uDAAS;mBAAC,qBAAqB;YACZ,KAAK;kBAAxB,uDAAS;mBAAC,OAAO;YACU,MAAM;kBAAjC,uDAAS;mBAAC,eAAe;YACD,UAAU;kBAAlC,uDAAS;mBAAC,YAAY;;;;;;;;;;;;;;AEnCzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;AACO;AAExB;AACI;AACQ;AACG;AAET;AAEI;AAEM;AACW;AACd;AACI;AACuC;AACV;AACnB;AACM;AACmB;AACG;AACoB;AAC3D;AACuC;AACtB;AACA;;AA+BlE,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,CAAC,gEAAa,CAAC,YAPjB;YACP,uEAAa;YACb,6EAAa;YACb,0DAAW;YACX,kEAAmB;YACnB,qEAAgB;SACjB;mIAIU,SAAS,mBA3BlB,2DAAY;QACZ,qEAAc;QACd,gFAAiB;QACjB,kEAAY;QACZ,uEAAc;QACd,8GAA0B;QAC1B,oGAAoB;QACpB,iFAAc;QACd,uFAAmB;QACnB,0GAAqB;QACrB,6GAAsB;QACtB,iIAA4B;QAC5B,sEAAc;QACd,6GAAsB;QACtB,uFAAmB;QACnB,uFAAmB,aAGnB,uEAAa;QACb,6EAAa;QACb,0DAAW;QACX,kEAAmB;QACnB,qEAAgB;6FAKP,SAAS;cA7BrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,qEAAc;oBACd,gFAAiB;oBACjB,kEAAY;oBACZ,uEAAc;oBACd,8GAA0B;oBAC1B,oGAAoB;oBACpB,iFAAc;oBACd,uFAAmB;oBACnB,0GAAqB;oBACrB,6GAAsB;oBACtB,iIAA4B;oBAC5B,sEAAc;oBACd,6GAAsB;oBACtB,uFAAmB;oBACnB,uFAAmB;iBACpB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,6EAAa;oBACb,0DAAW;oBACX,kEAAmB;oBACnB,qEAAgB;iBACjB;gBACD,SAAS,EAAE,CAAC,gEAAa,CAAC;gBAC1B,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACxDD;AAAA;AAAA;AAAsC;AAY/B,MAAM,YAAY,GAAa;IACpC,EAAE,EAAE,IAAI;IACR,KAAK,EAAE,EAAE;IACT,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,mDAAS,CAAC,QAAQ;CAC1B;;;;;;;;;;;;;ACnBD;AAAA;AAAO,MAAM,UAAU,GAAG;IACxB,SAAS,EAAE,IAAI;IACf,YAAY,EAAE,IAAI;CACnB;;;;;;;;;;;;;ACFD;AAAA;AAAA;AAAA;AAAsC;AAgB/B,MAAM,aAAa,GAAG;IAC3B,EAAE,EAAE,IAAI;IACR,QAAQ,EAAE,WAAW;IACrB,YAAY,EAAE,cAAc;IAC5B,gBAAgB,EAAE,kBAAkB;IACpC,aAAa,EAAE,gBAAgB;IAC/B,cAAc,EAAE,iBAAiB;IACjC,cAAc,EAAE,kBAAkB;IAClC,UAAU,EAAE,2BAA2B;IACvC,OAAO,EAAE,GAAG;CACb;AAEM,MAAM,UAAU,GAAG;IACxB,UAAU,EAAE,EAAE;IACd,QAAQ,EAAE,EAAE;IACZ,YAAY,EAAE,EAAE;IAChB,cAAc,EAAE,EAAE;IAClB,gBAAgB,EAAE,EAAE;IACpB,cAAc,EAAE,EAAE;IAClB,EAAE,EAAE,IAAI;IACR,aAAa,EAAE,EAAE;IACjB,OAAO,EAAE,EAAe;IACxB,KAAK,EAAE,mDAAS,CAAC,QAAQ;IACzB,eAAe,EAAE,KAAK;CACvB;;;;;;;;;;;;;ACzCD;AAAA;AAAA,IAAY,SAKX;AALD,WAAY,SAAS;IACnB,iDAAQ;IACR,mDAAS;IACT,+CAAO;IACP,mDAAS;AACX,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAsC;AAY/B,MAAM,cAAc,GAAG;IAC5B,EAAE,EAAE,IAAI;IACR,QAAQ,EAAE,SAAS;IACnB,IAAI,EAAE,KAAK;IACX,OAAO,EAAE,UAAU;IACnB,KAAK,EAAE,QAAQ;CAChB;AAEM,MAAM,WAAW,GAAY;IAClC,KAAK,EAAE,EAAE;IACT,QAAQ,EAAE,EAAE;IACZ,OAAO,EAAE,EAAE;IACX,IAAI,EAAE,EAAE;IACR,EAAE,EAAE,IAAI;IACR,UAAU,EAAE,EAAE;IACd,KAAK,EAAE,mDAAS,CAAC,QAAQ;CAC1B;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAsC;AAY/B,MAAM,cAAc,GAAG;IAC5B,EAAE,EAAE,IAAI;IACR,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,EAAE;IACZ,SAAS,EAAE,IAAI;IACf,KAAK,EAAE,mDAAS,CAAC,QAAQ;CAC1B;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8E;AACV;AACzB;;;;;;;;;;;;;ICgBnC,0EAeE;IAJA,4fAAuC;IAIvC,uEAUe;IACjB,4DAAM;;;;;;;;;IAzBJ,mMASC;IAMC,0DAEC;IAFD,uHAEC;;;IAxBP,sEAME;IAAA,yIAeE;IAYJ,4DAAM;;;;IAdF,0DAAmC;IAAnC,yGAAmC;;;;IA7BzC,uEACE;IAAA,yEAOE;IAAA,uDACF;IAAA,4DAAM;IACN,mIAME;;IA4BJ,4DAAO;;;;IA1CH,0DAIE;IAJF,2MAIE;IAEF,0DACF;IADE,sHACF;IAEE,0DAGC;IAHD,8KAGC;;;IAfP,yEACE;IAAA,6HACE;IA4CJ,4DAAM;;;;IA7CE,0DAA4C;IAA5C,iHAA4C;;;IAFtD,yEACE;IAAA,qHACE;;IA8CJ,4DAAM;;;IA/CgB,0DAAwD;IAAxD,8JAAwD;;;IAiD5E,0EAIE;IAAA,qEAAI;IAAA,0PAAoC;IAAA,4DAAK;IAC/C,4DAAM;;;IALN,8HAIE;;;;IAHA,wFAAgD;;;IAOlD,0EACE;IAAA,qEAAI;IAAA,gJAAe;IAAA,4DAAK;IAC1B,4DAAM;;;IAIN,uDACF;;;;IADE,uGACF;;;;IAOM,0EAKE;IAFA,sbAAmC;IAEnC,mEACF;IAAA,4DAAM;;;;IACN,0EAKE;IAFA,ybAAsC;IAEtC,uEACF;IAAA,4DAAM;;;IAdR,uEACE;IAAA,qIAKE;IAEF,qIAKE;IAEJ,4DAAO;;;IAZH,0DAA8B;IAA9B,4FAA8B;IAO9B,0DAA6B;IAA7B,2FAA6B;;;;IAbnC,0EACE;IAAA,0EAA4D;IAAxC,2YAAuC;IAAC,+DAAI;IAAA,4DAAM;IAEtE,+HACE;IAeJ,4DAAM;;;IAhBE,0DAAuB;IAAvB,wFAAuB;;AD7DjC,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,+DAAQ;IACR,mEAAU;IACV,mEAAU;AACZ,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAOM,MAAM,mBAAmB;IAgB9B,YACS,GAAmB,EACnB,EAAwB,EACxB,EAAuB,EACvB,EAAqB,EACrB,EAAqB;QAJrB,QAAG,GAAH,GAAG,CAAgB;QACnB,OAAE,GAAF,EAAE,CAAsB;QACxB,OAAE,GAAF,EAAE,CAAqB;QACvB,OAAE,GAAF,EAAE,CAAmB;QACrB,OAAE,GAAF,EAAE,CAAmB;QAnBpB,oBAAe,GAA0B,IAAI,0DAAY,EAAW;QACpE,sBAAiB,GAA0B,IAAI,0DAAY,EAElE;QAEH,eAAU,GAAa,EAAE;QACzB,sBAAiB,GAAG,4DAAa;QAEjC,kBAAa,mCAAgB,yDAAU,KAAE,OAAO,EAAE,EAAE,IAAE;QACtD,oBAAe,GAAY,KAAK;QAGhC,oBAAe,GAAG,KAAK;IAQpB,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,QAAQ;IAClD,CAAC;IAED,YAAY;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,CAAC,GAAiB,EAAE,EAAE;YAClE,IAAI,MAAM,GAAa,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;YAC/C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;gBAClC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;gBAClB,EAAE,CAAC,OAAO,CAAC,GAAG,uDAAS,CAAC,QAAQ;gBAChC,EAAE,CAAC,iBAAiB,CAAC,GAAG,KAAK;gBAC7B,OAAO,EAAE;YACX,CAAC,CAAC;YACF,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,KAAa,EAAE,CAAS;QAC1C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED,oBAAoB,CAAC,WAA2B;QAC9C,sBAAsB;QACtB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACvE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CACvC,CAAC,EACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CACvC;QACH,CAAC,CAAC;QACF,aAAa;QACb,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACvC,IAAI,CAAC,SAAS,IAAI,WAAW;QAC/B,CAAC,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,CAAS,EAAE,KAAa;QAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,CAAC;QACtB,IAAI,CAAC,eAAe,GAAG,IAAI;QAE3B,IAAI,CAAC,oBAAoB,CACvB,QAAQ,CAAC,sBAAsB,CAC7B,GAAG,KAAK,SAAS,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAClE,CACF;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;aACjB,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC;aACvB,SAAS,CAAC,CAAC,GAAiB,EAAE,EAAE;YAC/B,IAAI,OAAO,GAAc,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;YAEjD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,EAAE;gBACrC,GAAG,CAAC,KAAK,GAAG,uDAAS,CAAC,QAAQ;gBAC9B,OAAO,GAAG;YACZ,CAAC,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,GAAG,OAAO;YAChD,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACN,CAAC;IAED,aAAa,CAAC,EAAY;QACxB,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC;QACzB,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC;YAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;;YACjD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC;IACzC,CAAC;IAED,kBAAkB,CAAC,IAAa;QAC9B,IAAI,CAAC,eAAe,GAAG,IAAI;IAC7B,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe;IAC7B,CAAC;IAED,oBAAoB,CAAC,KAAa;QAChC,IACE,CAAC,CAAC,IAAI,CAAC,eAAe;YACtB,IAAI,CAAC,eAAe,KAAK,gBAAgB,CAAC,UAAU,EACpD;YACA,OAAO,KAAK,CAAC,eAAe;SAC7B;;YAAM,OAAO,IAAI;IACpB,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,eAAe,KAAK,gBAAgB,CAAC,QAAQ;IAC3D,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,eAAe,KAAK,gBAAgB,CAAC,UAAU;IAC7D,CAAC;IAED,uBAAuB,CAAC,WAAmB;QACzC,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBAAE,OAAO,KAAK;SAC7D;QACD,OAAO,IAAI;IACb,CAAC;IAED,aAAa,CAAC,KAAuB;QACnC,IAAI,CAAC,eAAe,GAAG,KAAK;IAC9B,CAAC;IAED,kBAAkB,CAAC,KAAa;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC;QACjE,uDAAuD;QACvD,KAAK,CAAC,IAAI,CACR,QAAQ,CAAC,sBAAsB,CAC7B,GAAG,KAAK,SAAS,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAClE,CACF,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACjB,IAAI,CAAC,SAAS,IAAI,GAAG;YACrB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;iBACrD,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;QAC5D,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,KAAa;QAC9B,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1B,iCAAiC;IACnC,CAAC;IAED,qBAAqB,CAAC,KAAa;QACjC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC;QAC7B,iCAAiC;IACnC,CAAC;;sFAtJU,mBAAmB;mGAAnB,mBAAmB;QCrBhC,+GACE;QAgDF,2MACE;QAOF,2MACE;QAKF,2MACE;QAGF,2MACE;;;QApEsB,6FAAqD;;6FDqBhE,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;2gBAEU,YAAY;kBAApB,mDAAK;YACI,eAAe;kBAAxB,oDAAM;YACG,iBAAiB;kBAA1B,oDAAM;;;;;;;;;;;;;;AExBT;AAAA;AAAA;AAAA;AAAA;AAAiD;;;;;ICQ7C,sEACE;IAAA,qEAAI;IAAA,8OAAkC;IAAA,4DAAK;IAC7C,4DAAM;;;;IAEJ,yEACE;IAAA,0EACE;IAAA,0EAAkB;IAAA,uDAAe;IAAA,4DAAM;IACvC,yEAAuD;IAAnC,mVAAS,kCAAwB,IAAC;IAAC,qGAAO;IAAA,4DAAM;IACtE,4DAAM;IACR,4DAAM;;;IAHgB,0DAAe;IAAf,sFAAe;;;IAFrC,mIACE;;;IADqB,wFAAiD;;;IAL5E,yEACE;IAAA,qHACE;IAEF,iNACE;IAOJ,4DAAM;;;;IAXC,0DAAgD;IAAhD,kGAAgD;;ADAlD,MAAM,mBAAmB;IAE9B,YAAmB,EAAqB;QAArB,OAAE,GAAF,EAAE,CAAmB;QADxC,aAAQ,GAAY,KAAK;IACkB,CAAC;IAE5C,QAAQ,KAAU,CAAC;IAEnB,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ;IAChC,CAAC;;sFARU,mBAAmB;mGAAnB,mBAAmB;QCRhC,yEACE;QAAA,yEACE;QAAA,yEAAmB;QAAA,uDAAuC;QAAA,4DAAM;QAChE,yEACE;QADkB,wIAAS,UAAM,IAAC;QAClC,uDACF;QAAA,4DAAM;QACR,4DAAM;QACN,+GACE;QAYJ,4DAAM;;QAlBiB,0DAAuC;QAAvC,iKAAuC;QAExD,0DACF;QADE,gLACF;QAEgB,0DAAgB;QAAhB,8EAAgB;;6FDCvB,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AEPD;AAAA;AAAO,MAAM,YAAY,GAAG;IAC1B,IAAI,EAAE,WAAW;IACjB,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,UAAU;IAChB,QAAQ,EAAE,UAAU;CACrB;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiD;AAEM;AACN;;;;AAO1C,MAAM,cAAc;IAQzB,YAAmB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAPhC,cAAS,GAAG,IAAI,wDAAS,CAAC;YACxB,IAAI,EAAE,IAAI,0DAAW,CAAC,8DAAY,CAAC,IAAI,CAAC;YACxC,IAAI,EAAE,IAAI,0DAAW,CAAC,8DAAY,CAAC,IAAI,CAAC;YACxC,QAAQ,EAAE,IAAI,0DAAW,CAAC,8DAAY,CAAC,QAAQ,CAAC;YAChD,IAAI,EAAE,IAAI,0DAAW,CAAC,8DAAY,CAAC,IAAI,CAAC;SACzC,CAAC;IAEiC,CAAC;IAEpC,QAAQ,KAAU,CAAC;IAEnB,OAAO;QACL,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACrC,CAAC;;4EAdU,cAAc;8FAAd,cAAc;QCV3B,0EACE;QAD4B,0IAAY,aAAS,IAAC;QAClD,yEAAoB;QAAA,gEAAK;QAAA,4DAAM;QAC/B,sEACA;QAAA,yEAAoB;QAAA,gEAAK;QAAA,4DAAM;QAC/B,sEACA;QAAA,yEAAoB;QAAA,oEAAS;QAAA,4DAAM;QACnC,sEACA;QAAA,0EAAoB;QAAA,qEAAS;QAAA,4DAAM;QACnC,uEACA;QAAA,6EAAsB;QAAA,iEAAK;QAAA,4DAAS;QACtC,4DAAO;;QAVD,oFAAuB;;6FDUhB,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2E;AAY9B;;;;;;;;;;;;;ICUnC,sEAME;IAAA,yFAI2B;IAC7B,4DAAM;;;;IAJF,0DAAqB;IAArB,iFAAqB;;;IAR3B,sEACE;IAAA,2HAME;IAMJ,4DAAM;;;;IAXF,0DAGC;IAHD,8FAGC;;;IANP,sEACE;IAAA,oHACE;IAaJ,4DAAM;;;;IAdC,0DAA8C;IAA9C,4FAA8C;;;IAgBnD,0EAAiC;IAAA,sJAAgB;IAAA,4DAAM;;;IAGvD,0EACE;IAAA,qPACF;IAAA,4DAAM;;ADvBP,MAAM,iBAAiB;IAK5B,YACS,GAAmB,EACnB,EAAa,EACb,EAAuB,EACvB,EAAqB,EACrB,EAAwB;QAJxB,QAAG,GAAH,GAAG,CAAgB;QACnB,OAAE,GAAF,EAAE,CAAW;QACb,OAAE,GAAF,EAAE,CAAqB;QACvB,OAAE,GAAF,EAAE,CAAmB;QACrB,OAAE,GAAF,EAAE,CAAsB;QATjC,iBAAY,GAAkB,IAAI;QAClC,oBAAe,GAAY,KAAK;IAS7B,CAAC;IACJ,eAAe;QACb,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;QAC9B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,mFAAgB,CAAC,QAAQ,CAAC;QACxD,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC;IAC/C,CAAC;IAED,QAAQ,KAAU,CAAC;IAEnB,iBAAiB;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC;IAC3D,CAAC;IAED,eAAe;QACb,IAAI,KAAK,GAAG,KAAK;QACjB,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,OAAO,KAAK;;YAC7B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO;IAC9C,CAAC;IAED,YAAY,CAAC,GAAW;QACtB,IAAI,CAAC,YAAY,GAAG,GAAG;IACzB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,GAAG,IAAI;IAC1B,CAAC;IAED,eAAe,CAAC,KAAc;QAC5B,IAAI,CAAC,eAAe,GAAG,KAAK;IAC9B,CAAC;;kFAxCU,iBAAiB;iGAAjB,iBAAiB;;;;;;QCnB9B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,sFAGoB;QAFlB,2JAAU,wBAAoB,IAAC,2FACtB,iBAAa,IADS;QAEhC,4DAAmB;QACtB,4DAAM;QACN,wFAKkB;QAFhB,4KAAmB,2BAAuB,IAAC;QAE7C,4DAAkB;QACpB,4DAAM;QACN,yEACE;QAAA,yEACE;QAAA,wEAAO;QAAA,0EAAe;QAAA,4DAAQ;QAChC,4DAAM;QACN,0EACE;QAAA,+GACE;QAeF,4MACE;QAEF,4MACE;QAIJ,4DAAM;QACR,4DAAM;QACR,4DAAM;;;QApCA,0DAA6B;QAA7B,0FAA6B;QAUxB,0DAAgD;QAAhD,qFAAgD;;6FDD9C,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;sgBAI0B,UAAU;kBAAlC,uDAAS;mBAAC,YAAY;;;;;;;;;;;;;;AEtBzB;AAAA;AAAA;AAAmD;;AAM5C,MAAM,cAAc;IACzB,SAAS,CAAC,SAAmB,EAAE,QAAgB;QAC7C,IAAI,CAAC,CAAC,QAAQ;YAAE,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC;;YAC5D,OAAO,SAAS;IACvB,CAAC;;4EAJU,cAAc;8GAAd,cAAc;6FAAd,cAAc;cAH1B,kDAAI;eAAC;gBACJ,IAAI,EAAE,YAAY;aACnB;;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAuE;;;AAOhE,MAAM,oBAAoB;IAK/B;QAJU,WAAM,GAAyB,IAAI,0DAAY,EAAU;QACzD,UAAK,GAAyB,IAAI,0DAAY,EAAU;QACxD,eAAU,GAAG,EAAE;IAEV,CAAC;IAEhB,QAAQ,KAAU,CAAC;IAEnB,eAAe,CAAC,CAAgB;QAC9B,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO;YAAE,IAAI,CAAC,kBAAkB,EAAE;aAC3C,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ;YAAE,IAAI,CAAC,UAAU,EAAE;;YACzC,OAAM;IACb,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU;YAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IAC5D,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,GAAG,EAAE;QACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IACnC,CAAC;;wFAtBU,oBAAoB;oGAApB,oBAAoB;QCPjC,yEACE;QAAA,wEAAO;QAAA,yGAAW;QAAA,4DAAQ;QAC1B,2EAMA;QAHE,qJAAW,2BAAuB,IAAC;QAHrC,4DAMA;QAAA,yEAAmD;QAA/B,yIAAS,wBAAoB,IAAC;QAAC,yFAAK;QAAA,4DAAM;QAChE,4DAAM;;QALF,0DAAoB;QAApB,iFAAoB;;6FDGX,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;sCAEW,MAAM;kBAAf,oDAAM;YACG,KAAK;kBAAd,oDAAM;YACG,UAAU;kBAAnB,oDAAM;;;;;;;;;;;;;;AEVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AAEpB;AAGV;;;;;;;;;ICDxC,sEACE;IAAA,0EAAmB;IAAA,2LAAuB;IAAA,4DAAM;IAClD,4DAAM;;;IAEJ,sEACE;IAAA,0EAAmB;IAAA,0LAAsB;IAAA,4DAAM;IACjD,4DAAM;;;IAFN,gIACE;;;IADG,qFAAoB;;;;IAwDzB,sEACE;IAAA,6EAAoD;IAA9B,kUAA6B;IAAC,8DAAG;IAAA,4DAAS;IAClE,4DAAM;;;;IAEJ,6EAAqD;IAA/B,8UAA8B;IAAC,+DAAI;IAAA,4DAAS;;;;IAYlE,sEACE;IAAA,8FAM0B;IAFxB,oXAAuC;IAEzC,4DAA0B;IAC5B,4DAAM;;;;;IANF,0DAAqB;IAArB,kFAAqB;;;IAN3B,0EAIE;IAAA,yHACE;IAQJ,4DAAM;;;;IATC,0DAAkC;IAAlC,uGAAkC;;ADvEjD,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,mEAAQ;IACR,iEAAO;AACT,CAAC,EAHW,kBAAkB,KAAlB,kBAAkB,QAG7B;AAOM,MAAM,qBAAqB;IAKhC,YACU,EAAc,EACd,EAAwB,EACzB,EAAkB,EACjB,MAAc;QAHd,OAAE,GAAF,EAAE,CAAY;QACd,OAAE,GAAF,EAAE,CAAsB;QACzB,OAAE,GAAF,EAAE,CAAgB;QACjB,WAAM,GAAN,MAAM,CAAQ;QANxB,kBAAa,mCAAgB,yDAAU,KAAE,OAAO,EAAE,EAAE,IAAE;QAQpD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa;IACjC,CAAC;IACD,QAAQ;QACN,gBAAgB;QAChB,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;IACrC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,KAAK,kBAAkB,CAAC,QAAQ;IACrD,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,KAAK,kBAAkB,CAAC,OAAO;IACpD,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,uDAAS,CAAC,OAAO;QAC5C,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACpE,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxB,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;QAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACvE,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxB,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,CAAgB;QACxB,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ;YAAE,IAAI,CAAC,UAAU,EAAE;;YACpC,OAAM;IACb,CAAC;IAED,cAAc,CAAC,WAAmB;QAChC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;QACnE,oDAAoD;IACtD,CAAC;IAED,aAAa;QACX,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE;IACrB,CAAC;IAED,gBAAgB,CAAC,MAAe;QAC9B,MAAM,CAAC,KAAK,GAAG,uDAAS,CAAC,OAAO;QAChC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;IACzC,CAAC;IAED,kBAAkB;QAChB,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;YACjD,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;IAClD,CAAC;IAED,kBAAkB,CAAC,MAAe;QAChC,OAAO,MAAM,CAAC,KAAK,KAAK,uDAAS,CAAC,SAAS;IAC7C,CAAC;;0FAxEU,qBAAqB;qGAArB,qBAAqB;QCnBlC,yEACE;QAD2B,oJAAW,qBAAiB,IAAC;QACxD,yEACE;QAAA,yEACE;QAAA,yEAAuD;QAAvB,0IAAS,gBAAY,IAAC;QAAC,4DAAC;QAAA,4DAAM;QAC9D,iHACE;QAEF,6MACE;QAIJ,4DAAM;QACN,yEACE;QAAA,0EACE;QAAA,0EACE;QAAA,2EAAqB;QAAA,mHAAU;QAAA,4DAAO;QACtC,6EAMF;QAJI,0MAAoC,yFACzB,wBAAoB,IADK;QAFtC,4DAMF;QAAA,4DAAM;QAEN,0EACE;QAAA,2EAAqB;QAAA,gIAAa;QAAA,4DAAO;QACzC,6EAMF;QAJI,8MAAwC,yFAC7B,wBAAoB,IADS;QAF1C,4DAMF;QAAA,4DAAM;QAEN,0EACE;QAAA,2EAAqB;QAAA,oKAAmB;QAAA,4DAAO;QAC/C,6EAMF;QAJI,kNAA4C,yFACjC,wBAAoB,IADa;QAF9C,4DAMF;QAAA,4DAAM;QAEN,0EACE;QAAA,2EAAqB;QAAA,4IAAe;QAAA,4DAAO;QAC3C,6EAMF;QAJI,+MAAyC,yFAC9B,wBAAoB,IADU;QAF3C,4DAMF;QAAA,4DAAM;QAEN,0EACE;QAAA,2EAAqB;QAAA,8MAA0B;QAAA,4DAAO;QACtD,gFAKY;QAHV,+MAAsC,4FAC3B,wBAAoB,IADO;QAGvC,4DAAW;QACd,4DAAM;QACN,mHACE;QAEF,gNACE;QAEJ,4DAAO;QACP,2EACE;QAAA,sEAAyB;QACzB,2EACE;QAAA,2EAA8C;QAA1B,2IAAS,mBAAe,IAAC;QAAC,6DAAC;QAAA,4DAAM;QACvD,4DAAM;QACN,oHAIE;QAUJ,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;;;QAzFK,0DAAkC;QAAlC,iFAAkC;QAejC,0DAAoC;QAApC,+FAAoC;QAUpC,0DAAwC;QAAxC,mGAAwC;QAUxC,0DAA4C;QAA5C,uGAA4C;QAU5C,0DAAyC;QAAzC,oGAAyC;QAUzC,0DAAsC;QAAtC,iGAAsC;QAKrC,0DAAsC;QAAtC,iFAAsC;QAczC,0DAAqE;QAArE,8FAAqE;;6FD3DlE,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AElBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASsB;AAGiB;AAKS;;;;;;;;;;;;ICAtC,4EAMF;IAHI,4WAA8B;IAHhC,4DAMF;;;IAHI,4FAA8B;;;;IAIlC,0EACE;IADwC,0UAA8B,IAAI,KAAE;IAC5E,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,4MACF;;;;IACA,0EACE;IADuC,6UAA8B,KAAK,KAAE;IAC5E,0HACF;IAAA,4DAAM;;;IACN,qFAIkB;;;;IA5BpB,yEACE;IAAA,yEACE;IAAA,yEACE;IAAA,4EAMA;IAJE,oWAA4B;IAF9B,4DAMA;IAAA,4EAAiC;IAAA,yKAAoB;IAAA,4DAAQ;IAC/D,4DAAM;IACN,mIAMF;IAAA,4DAAM;IACN,+HACE;IAEF,+HACE;IAEF,uJAIA;IAEA,2EACE;IAAA,2EACE;IADkB,0UAA8B;IAChD,qMACF;IAAA,4DAAM;IACN,2EACE;IADkB,+UAAmC;IACrD,wIACF;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAM;;;IAjCE,0DAA4B;IAA5B,0FAA4B;IAU9B,0DAAsB;IAAtB,uFAAsB;IAGN,0DAAqB;IAArB,sFAAqB;IAGrB,0DAAoB;IAApB,qFAAoB;IAIxC,0DAAoB;IAApB,qFAAoB;;;;IA0BpB,0EACE;IAAA,4EAA4B;IAAA,8MAA2B;IAAA,4DAAQ;IAC/D,4EAKF;IAFI,6WAA8B;IAHhC,4DAKF;IAAA,4DAAM;;;IAFF,0DAA8B;IAA9B,6FAA8B;;;;IAGlC,0EAKE;IAFA,iVAA+B;IAE/B,4IACF;IAAA,4DAAM;;;;IAzBR,0EACE;IAAA,0EACE;IAAA,4EAAkB;IAAA,oIAAa;IAAA,4DAAQ;IACvC,4EAMF;IAFI,mWAA+C;IAJjD,4DAMF;IAAA,4DAAM;IAEN,+HACE;IAOF,+HAKE;IAEJ,4DAAM;;;IAf4B,0DAAuB;IAAvB,wFAAuB;IAUrD,0DAAwB;IAAxB,yFAAwB;;AD9ClC,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,iEAAU;IACV,iEAAU;AACZ,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AAOM,MAAM,4BAA4B;IAavC,YACU,EAAc,EACf,EAAkB,EAClB,EAAwB,EACxB,KAA0B,EAC1B,EAAqB;QAJpB,OAAE,GAAF,EAAE,CAAY;QACf,OAAE,GAAF,EAAE,CAAgB;QAClB,OAAE,GAAF,EAAE,CAAsB;QACxB,UAAK,GAAL,KAAK,CAAqB;QAC1B,OAAE,GAAF,EAAE,CAAmB;QAd9B,mBAAc,GAAY,KAAK;QAC/B,iBAAY,GAAG,KAAK;QACpB,qBAAgB,GAAW,EAAE;QAc3B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa;IACjC,CAAC;IAED,eAAe,KAAU,CAAC;IAE1B,kBAAkB,KAAI,CAAC;IAEvB,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,GAAG,KAAK;QACzB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;QACnC,IAAI,CAAC,cAAc,GAAG,KAAK;QAC3B,IAAI,CAAC,gBAAgB,GAAG,EAAE;QAC1B,IAAI,CAAC,YAAY,GAAG,SAAS;IAC/B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,OAAO,KAAK,eAAe,CAAC,UAAU;IACpD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,OAAO,KAAK,eAAe,CAAC,UAAU;IACpD,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,gBAAgB,GAAG,EAAE;IAC5B,CAAC;IAED,gBAAgB,CAAC,IAAqB,EAAE,cAAsB;QAC5D,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClC,IAAI,IAAI,EAAE;gBACR,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI;gBAChC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;oBACvB,IAAI,EAAE,cAAc;iBACrB,CAAC;gBACF,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE;gBAC7B,MAAM,QAAQ,GAAG,GAAG,UAAU,CAAC,OAAO,EAAE,IACtC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAC1B,IAAI,UAAU,CAAC,WAAW,EAAE,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,UAAU,CAAC,UAAU,EAAE,IAAI,UAAU,CAAC,UAAU,EAAE,EAAE;gBAC7G,MAAM,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;gBAC9C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,cAAc,CAAC;gBACrD,iDAAgB,CAAC,CAAC,EAAE,QAAQ,GAAG,SAAS,CAAC;gBACzC,IAAI,CAAC,UAAU,EAAE;aAClB;YACD,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC;YAChC,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YAC/B,QAAQ,EAAE,KAAK;SAChB,CAAC;QACF,IAAI,CAAC,gBAAgB,CACnB,IAAI,EACJ,gDAAgD,CACjD;IACH,CAAC;IAED,uBAAuB;QACrB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC;YAChC,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YAC/B,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;SACrD,CAAC;QACF,IAAI,CAAC,gBAAgB,CACnB,IAAI,EACJ,gDAAgD,CACjD;IACH,CAAC;IAED,eAAe,CAAC,KAAe;QAC7B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,gBAAgB,GAAG,EAAE;IAC5B,CAAC;IAED,aAAa;QACX,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YACrD,MAAM,SAAS,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;YACzD,OAAO,SAAS,KAAK,MAAM;SAC5B;;YAAM,OAAO,KAAK;IACrB,CAAC;IAED,cAAc;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY;IAC5B,CAAC;IAED,mBAAmB;QACjB,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE;QACjC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC;QACxC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE;YACxB,IAAI,YAAY,GAAW,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YACpD,IAAI,KAAK,GAAa,YAAY;iBAC/B,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,GAAoB,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;gBACxB,IAAI,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE;oBACpE,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,eAAe,EACf,qDAAqD,CACtD;oBACD,IAAI,CAAC,EAAE;yBACJ,YAAY,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC;yBAC9D,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;wBACjB,IAAI,CAAC,UAAU,EAAE;wBACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,kBAAkB,EAClB,gCAAgC,CACjC;wBACD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;oBAC1B,CAAC,CAAC;iBACL;qBAAM;oBACL,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,EAAE,0BAA0B,CAAC;oBAC/D,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;iBAChC;aACF;iBAAM;gBACL,IAAI,CAAC,EAAE;qBACJ,YAAY,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC;qBACrE,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjB,IAAI,CAAC,UAAU,EAAE;oBACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,kBAAkB,EAClB,gCAAgC,CACjC;oBACD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAC1B,CAAC,CAAC;aACL;QACH,CAAC;IACH,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,CACxC,CAAC,IAAoC,EAAE,EAAE;YACvC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,mFAAgB,CAAC,UAAU,CAAC;gBACrD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;aAC5C;QACH,CAAC,CACF;IACH,CAAC;IAED,oBAAoB,CAAC,MAAe;QAClC,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY;QACtC,IAAI,MAAM;YACR,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,mFAAgB,CAAC,UAAU,CAAC;gBAC1D,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YAClD,CAAC,EAAE,CAAC,CAAC;IACT,CAAC;;wGA3KU,4BAA4B;4GAA5B,4BAA4B;;;;;;;;QC/BzC,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEAAuD;QAAvB,iJAAS,gBAAY,IAAC;QAAC,4DAAC;QAAA,4DAAM;QAChE,4DAAM;QACN,yEACE;QAAA,yHACE;QAuCF,wHACE;QA0BJ,4DAAM;QACR,4DAAM;QACR,4DAAM;;QArE2B,0DAAsB;QAAtB,oFAAsB;QAwCtB,0DAAsB;QAAtB,oFAAsB;;6FDf1C,4BAA4B;cALxC,uDAAS;eAAC;gBACT,QAAQ,EAAE,2BAA2B;gBACrC,WAAW,EAAE,wCAAwC;gBACrD,SAAS,EAAE,CAAC,wCAAwC,CAAC;aACtD;ofAS6B,mBAAmB;kBAA9C,0DAAY;mBAAC,YAAY;YAGD,UAAU;kBAAlC,uDAAS;mBAAC,YAAY;;;;;;;;;;;;;;AE1CzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMsB;AACqC;AACS;AAEN;AACP;AACT;;;;;;;ICNxC,sEACE;IAAA,0EAAmB;IAAA,uMAAyB;IAAA,4DAAM;IACpD,4DAAM;;;IAEJ,0EAAmB;IAAA,mQAAmC;IAAA,4DAAM;;;;IA8CxD,0EAKE;IAFA,0UAAoC;IAEpC,mEACF;IAAA,4DAAM;;;;IASJ,sEACE;IAAA,0EASE;IAFA,khBAA4D;IAE5D,0EACE;IAAA,qEACF;IAAA,4DAAM;IACN,0EAKE;IAFA,kcAA8C;IAE9C,uDACF;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAM;;;;;IAnBF,0DAKC;IALD,4IAKC;IAWC,0DACF;IADE,gGACF;;;IAzBN,sEAME;IAAA,0HACE;IAqBJ,4DAAM;;;;IAtBC,0DAA+B;IAA/B,oGAA+B;;;;IAwCtC,0EACE;IAAA,0EACE;IADkB,wUAAkC;IACpD,mEACF;IAAA,4DAAM;IACR,4DAAM;;;;IASJ,sEACE;IAAA,0EASE;IAFA,wgBAAsD;IAEtD,0EACE;IAAA,qEACF;IAAA,4DAAM;IACN,0EAKE;IAFA,kcAAgD;IAEhD,uDACF;IAAA,4DAAM;IACN,0EAKE;IAFA,icAA+C;IAE/C,uDACF;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAM;;;;;IA1BF,0DAKC;IALD,oIAKC;IAWC,0DACF;IADE,8FACF;IAME,0DACF;IADE,6FACF;;;IAhCN,sEAME;IAAA,0HACE;IA4BJ,4DAAM;;;;IA7BC,0DAA6B;IAA7B,kGAA6B;;;;IA8BpC,sEACE;IAAA,2EAIE;IAFA,mVAAmC;IAEnC,uEACA;IAAA,uEACA;IAAA,6EAAsB;IAAA,8DAAG;IAAA,4DAAS;IACpC,4DAAO;IACT,4DAAM;;;IAPF,0DAA4B;IAA5B,4FAA4B;;;;IAWtC,sEACE;IAAA,0EACE;IADqC,oUAA8B;IACnE,gEACF;IAAA,4DAAM;IACR,4DAAM;;;;IACN,sEACE;IAAA,0EACE;IADqC,qUAA+B;IACpE,iEACF;IAAA,4DAAM;IACR,4DAAM;;ADjKZ,IAAY,mBAGX;AAHD,WAAY,mBAAmB;IAC7B,qEAAQ;IACR,mEAAO;AACT,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,QAG9B;AAOM,MAAM,sBAAsB;IAsBjC,YACU,EAAc,EACf,EAAkB,EAClB,EAAwB;QAFvB,OAAE,GAAF,EAAE,CAAY;QACf,OAAE,GAAF,EAAE,CAAgB;QAClB,OAAE,GAAF,EAAE,CAAsB;QAtBjC,mBAAc,mCAAiB,2DAAW,KAAE,UAAU,EAAE,EAAE,IAAE;QAE5D,qBAAgB,mCAAoB,iEAAc,KAAE,QAAQ,EAAE,EAAE,IAAE;QAClE,mBAAc,qBAAkB,6DAAY,EAAE;QAE9C,uBAAkB,GAAY,KAAK;QACnC,qBAAgB,GAAY,KAAK;QAEvB,kBAAa,GAA0B,IAAI,0DAAY,EAAW;QAE5E,mBAAc,GAAG,IAAI,wDAAS,CAAC;YAC7B,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC9B,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;SAC3B,CAAC;QAEF,qBAAgB,GAAG,IAAI,wDAAS,CAAC;YAC/B,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;SAC/B,CAAC;QAOA,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa;IACjC,CAAC;IAED,QAAQ;QACN,gBAAgB;QAChB,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;QACnC,IAAI,CAAC,gBAAgB,mCAAQ,iEAAc,KAAE,QAAQ,EAAE,EAAE,GAAE;QAC3D,IAAI,CAAC,cAAc,GAAG,6DAAY;QAClC,IAAI,CAAC,cAAc,mCAAQ,2DAAW,KAAE,UAAU,EAAE,EAAE,GAAE;QACxD,IAAI,CAAC,kBAAkB,GAAG,KAAK;QAC/B,IAAI,CAAC,gBAAgB,GAAG,KAAK;IAC/B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,KAAK,mBAAmB,CAAC,QAAQ;IACtD,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,KAAK,mBAAmB,CAAC,OAAO;IACrD,CAAC;IAED,uBAAuB,CAAC,SAAqB,EAAE,KAAa;QAC1D,IAAI,CAAC,gBAAgB,GAAG,SAAS;QACjC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACpC,CAAC;IAED,qBAAqB,CAAC,OAAiB,EAAE,KAAa;QACpD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,OAAO;IAC/B,CAAC;IAED,qBAAqB,CAAC,KAAa;QACjC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,CAAC,CAAC,GAAG,CACrE,CAAC,GAAG,EAAE,EAAE;YACN,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,CACrC,CAAC,EACD,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAClD;QACH,CAAC,CACF;QAED,MAAM,aAAa,GAAG,QAAQ,CAAC,sBAAsB,CACnD,YAAY,KAAK,EAAE,CACpB,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,CAAC,aAAa,EAAE;YACnB,aAAa,CAAC,SAAS,IAAI,uBAAuB;YAClD,IAAI,CAAC,kBAAkB,GAAG,IAAI;YAC9B,IAAI,CAAC,gBAAgB,GAAG,KAAK;SAC9B;IACH,CAAC;IAED,mBAAmB,CAAC,KAAa;QAC/B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,CACnE,CAAC,GAAG,EAAE,EAAE;YACN,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,CACrC,CAAC,EACD,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAChD;QACH,CAAC,CACF;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,sBAAsB,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,CAAC,WAAW,EAAE;YACjB,WAAW,CAAC,SAAS,IAAI,qBAAqB;YAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI;SAC7B;IACH,CAAC;IAED,gBAAgB,CAAC,CAAgB;QAC/B,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ,EAAE;YAC3C,MAAM,MAAM,GAAuC,CAAC,CAAC,MAAM;YAC3D,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ,EAAE;gBACtB,MAAM,CAAC,KAAK,GAAG,EAAE;aAClB;iBAAM,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,EAAE;aAC3B;SACF;;YAAM,OAAM;IACf,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE;YAC3C,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC;gBAClC,QAAQ,EAAE,EAAE;gBACZ,EAAE,EAAE,IAAI;gBACR,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS;gBAC7C,MAAM,EAAE,KAAK;gBACb,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,EAAE;gBACjC,KAAK,EAAE,uDAAS,CAAC,OAAO;aACzB,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;SAC9B;IACH,CAAC;IAED,cAAc;QACZ,IACE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE;YAC5C,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EACxC;YACA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAClC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK;gBACtC,EAAE,EAAE,IAAI;gBACR,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,KAAK;gBACb,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE;gBACtC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS;gBAC3C,KAAK,EAAE,uDAAS,CAAC,OAAO;aACzB,CAAC;YACF,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;SAC5B;IACH,CAAC;IAED,mBAAmB;QACjB,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE;aAChB,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC;aACpC,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;YACtB,IAAI,GAAG,EAAE;gBACP,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC;gBACzB,GAAG,CAAC,WAAW,EAAE;gBACjB,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE;aAC3B;QACH,CAAC,CAAC;IACN,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,kBAAkB,CAAC,CAAa,EAAE,SAAqB;QACrD,MAAM,YAAY,GAAoB,CAAC,CAAC,MAAO,CAAC,SAAS;QACzD,IAAI,SAAS,CAAC,MAAM,KAAK,YAAY,EAAE;YACrC,SAAS,CAAC,MAAM,GAAG,YAAY;YAC/B,IAAI,SAAS,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;gBACxC,SAAS,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;SACxC;IACH,CAAC;IAED,sBAAsB,CAAC,CAAa,EAAE,OAAiB;QACrD,MAAM,YAAY,GAAoB,CAAC,CAAC,MAAO,CAAC,SAAS;QACzD,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,EAAE;YACnC,OAAO,CAAC,MAAM,GAAG,YAAY;YAC7B,IAAI,OAAO,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;gBACtC,OAAO,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;SACtC;IACH,CAAC;IAED,qBAAqB,CAAC,CAAa,EAAE,OAAiB;QACpD,MAAM,QAAQ,GAAoB,CAAC,CAAC,MAAO,CAAC,SAAS;QACrD,IAAI,OAAO,CAAC,KAAK,KAAK,QAAQ,EAAE;YAC9B,OAAO,CAAC,KAAK,GAAG,QAAQ;YACxB,IAAI,OAAO,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;gBACtC,OAAO,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;SACtC;IACH,CAAC;IAED,mBAAmB;QACjB,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;YAClD,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;IACnD,CAAC;IAED,YAAY,CAAC,GAA0B;QACrC,OAAO,GAAG,CAAC,KAAK,KAAK,uDAAS,CAAC,SAAS;IAC1C,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,gBAAgB,GAAG,KAAK;QAC7B,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;YAClD,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;aAC5C,IACH,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,uDAAS,CAAC,OAAO;YAC/C,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,uDAAS,CAAC,SAAS,EACjD;YACA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CACnC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,EAC3D,CAAC,CACF;SACF;QACD,IAAI,CAAC,cAAc,GAAG,6DAAY;IACpC,CAAC;IAED,wBAAwB;QACtB,IAAI,CAAC,kBAAkB,GAAG,KAAK;QAC/B,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,KAAK,uDAAS,CAAC,QAAQ;YACpD,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,uDAAS,CAAC,SAAS;aAC9C,IACH,IAAI,CAAC,gBAAgB,CAAC,KAAK,KAAK,uDAAS,CAAC,OAAO;YACjD,IAAI,CAAC,gBAAgB,CAAC,KAAK,KAAK,uDAAS,CAAC,SAAS,EACnD;YACA,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CACnC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAC7D,CAAC,CACF;SACF;QACD,IAAI,CAAC,gBAAgB,mCAAQ,iEAAc,KAAE,QAAQ,EAAE,EAAE,GAAE;IAC7D,CAAC;;4FAnOU,sBAAsB;sGAAtB,sBAAsB;QCzBnC,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QADgD,2IAAS,gBAAY,IAAC;QACtE,8DACF;QAAA,4DAAM;QACN,kHACE;QAEF,8MACE;QAEJ,4DAAM;QACN,yEACE;QAAA,uEACE;QAAA,0EACE;QAAA,2EAAqB;QAAA,uGAAQ;QAAA,4DAAO;QACpC,4EAMF;QAJI,4MAAqC,0FAC1B,yBAAqB,IADK;QAFvC,4DAMF;QAAA,4DAAM;QACN,0EACE;QAAA,2EAAqB;QAAA,+EAAI;QAAA,4DAAO;QAChC,6EAMF;QAJI,wMAAiC,0FACtB,yBAAqB,IADC;QAFnC,4DAMF;QAAA,4DAAM;QACN,0EACE;QAAA,2EAAqB;QAAA,6GAAS;QAAA,4DAAO;QACrC,6EAMF;QAJI,2MAAoC,0FACzB,yBAAqB,IADI;QAFtC,4DAMF;QAAA,4DAAM;QACN,0EACE;QAAA,2EAAqB;QAAA,iGAAO;QAAA,4DAAO;QACnC,6EAMF;QAJI,yMAAkC,0FACvB,yBAAqB,IADE;QAFpC,4DAMF;QAAA,4DAAM;QACR,4DAAO;QACP,2EACE;QAAA,2EACE;QAAA,2EACE;QAAA,wEACA;QAAA,qHAKE;QAEJ,4DAAM;QACN,2EACE;QAAA,qHAME;QAuBF,4EAIE;QAAA,6EAMA;QAFE,wJAAW,4BAAwB,IAAC;QAJtC,4DAMA;QAAA,2EAAoD;QAAhC,4IAAS,yBAAqB,IAAC;QAAC,4GAAQ;QAAA,4DAAM;QACpE,4DAAO;QACT,4DAAM;QACR,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,sEACA;QAAA,qHACE;QAIJ,4DAAM;QACN,2EACE;QAAA,qHAME;QA8BF,qHACE;QASJ,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,qHACE;QAIF,qHACE;QAIJ,4DAAM;QACR,4DAAM;QACR,4DAAM;;;QA7KK,0DAAkC;QAAlC,iFAAkC;QAajC,0DAAqC;QAArC,gGAAqC;QASrC,0DAAiC;QAAjC,4FAAiC;QASjC,0DAAoC;QAApC,+FAAoC;QASpC,0DAAkC;QAAlC,6FAAkC;QAYhC,0DAA0B;QAA1B,wFAA0B;QAQ1B,0DAGC;QAHD,kGAGC;QA2BD,0DAA8B;QAA9B,2FAA8B;QAe3B,0DAAwB;QAAxB,sFAAwB;QAQ3B,0DAGC;QAHD,kGAGC;QAgCE,0DAA0B;QAA1B,wFAA0B;QAahC,0DAAmB;QAAnB,iFAAmB;QAKnB,0DAAoB;QAApB,kFAAoB;;6FDnJlB,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;0SAYW,aAAa;kBAAtB,oDAAM;;;;;;;;;;;;;;AEpCT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMsB;AACwC;AACN;AACG;AACS;AAKpB;AACF;;;;;;;;;;;;ICgGpC,0EAKE;IAFA,uUAA6B;IAE7B,uDAEF;IAAA,4DAAM;;;IAFJ,0DAEF;IAFE,uQAEF;;;;IAXF,0EACE;IAAA,0EACE;IADkB,2TAAwB;IAC1C,oRACF;IAAA,4DAAM;IACN,0HAKE;IAGJ,4DAAM;;;IANF,0DAAqB;IAArB,sFAAqB;;ADxF1B,MAAM,sBAAsB;IAOjC,YACU,EAAc,EACd,EAAwB,EACxB,EAAwB,EACzB,EAAqB,EACrB,EAAqB;QAJpB,OAAE,GAAF,EAAE,CAAY;QACd,OAAE,GAAF,EAAE,CAAsB;QACxB,OAAE,GAAF,EAAE,CAAsB;QACzB,OAAE,GAAF,EAAE,CAAmB;QACrB,OAAE,GAAF,EAAE,CAAmB;QAV9B,mBAAc,mCAAgB,yDAAU,KAAE,OAAO,EAAE,EAAE,IAAE;QAEvD,kBAAa,GAAY,KAAK;QAC9B,iBAAY,GAAY,IAAI;QAS1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa;QACpC,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IACD,eAAe;QACb,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,mFAAgB,CAAC,UAAU,CAAC;QACnE,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAC1D,CAAC;IAED,QAAQ,KAAU,CAAC;IAEnB,UAAU;QACR,IAAI,CAAC,UAAU,EAAE;QACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;IACrC,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,GAAG,KAAK;QAC1B,IAAI,OAAO,qBAAkB,6DAAY,CAAE;QAC3C,IAAI,SAAS,mCAAoB,iEAAc,KAAE,QAAQ,EAAE,EAAE,GAAE;QAC/D,IAAI,MAAM,mCAAiB,2DAAW,KAAE,UAAU,EAAE,EAAE,GAAE;QACxD,IAAI,CAAC,cAAc,mCAAQ,yDAAU,KAAE,OAAO,EAAE,EAAE,GAAE;QAEpD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;QAChC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAE,CAAC;YAC1C,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,KAAK,CAAC;SACnD;IACH,CAAC;IAED,eAAe;QACb,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACtE,IAAI,MAAM,GAAa,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;YAC/C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,OAAO,EAAE;gBAC9B,GAAG,CAAC,WAAW,EAAE;gBACjB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAE,CAAC;gBAC1C,OAAO,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC;aACzD;iBAAM;gBACL,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;oBACzB,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;oBAClB,EAAE,CAAC,OAAO,CAAC,GAAG,uDAAS,CAAC,QAAQ;oBAChC,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE;gBACzB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC9C,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;gBACvB,GAAG,CAAC,WAAW,EAAE;aAClB;QACH,CAAC,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,KAAc;QAClC,IAAI,CAAC,aAAa,GAAG,KAAK;IAC5B,CAAC;IAED,iBAAiB,CAAC,KAAc;QAC9B,IAAI,CAAC,YAAY,GAAG,KAAK;IAC3B,CAAC;IAED,YAAY;QACV,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC;IAC9D,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC;IACnE,CAAC;;4FAjFU,sBAAsB;sGAAtB,sBAAsB;;;;;;QC1BnC,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEAAuD;QAAvB,2IAAS,gBAAY,IAAC;QAAC,4DAAC;QAAA,4DAAM;QAChE,4DAAM;QACN,yEACE;QAAA,yEACE;QAAA,qEAAI;QAAA,gEAAK;QAAA,4DAAK;QACd,2EAAwB;QAAA,oEAAQ;QAAA,4DAAQ;QACxC,4EAMA;QAHE,4MAAqC;QAHvC,4DAMA;QAAA,4EAA2B;QAAA,wEAAY;QAAA,4DAAQ;QAC/C,4EAMA;QAHE,gNAAyC;QAH3C,4DAMA;QAAA,6EAA6B;QAAA,0EAAc;QAAA,4DAAQ;QACnD,6EAMA;QAHE,kNAA2C;QAH7C,4DAMA;QAAA,6EAA+B;QAAA,4EAAgB;QAAA,4DAAQ;QACvD,6EAMA;QAHE,oNAA6C;QAH/C,4DAMA;QAAA,6EAA4B;QAAA,yEAAa;QAAA,4DAAQ;QACjD,6EAMA;QAHE,iNAA0C;QAH5C,4DAMA;QAAA,6EAA0B;QAAA,sEAAU;QAAA,4DAAQ;QAC5C,6EAKA;QAFE,8MAAuC;QAHzC,4DAKA;QAAA,sEAAI;QAAA,kEAAM;QAAA,4DAAK;QACf,6EAAsB;QAAA,gEAAI;QAAA,4DAAQ;QAClC,6EAKA;QAFE,+LAAoC,CAAC,mBAAO;QAH9C,4DAKA;QAAA,6EAA0B;QAAA,oEAAQ;QAAA,4DAAQ;QAC1C,6EAKA;QAFE,+LAAoC,CAAC,uBAAW;QAHlD,4DAKA;QAAA,6EAAyB;QAAA,mEAAO;QAAA,4DAAQ;QACxC,6EAKA;QAFE,+LAAoC,CAAC,sBAAU;QAHjD,4DAKA;QAAA,6EAAuB;QAAA,iEAAK;QAAA,4DAAQ;QACpC,6EAKA;QAFE,+LAAoC,CAAC,oBAAQ;QAH/C,4DAKA;QAAA,sEAAI;QAAA,qEAAS;QAAA,4DAAK;QAClB,6EAAuB;QAAA,kEAAM;QAAA,4DAAQ;QACrC,6EAKA;QAFE,+LAAoC,CAAC,aAAa,CAAC,qBAAS;QAH9D,4DAKA;QAAA,sEAAI;QAAA,mEAAO;QAAA,4DAAK;QAChB,6EAAwB;QAAA,kEAAM;QAAA,4DAAQ;QACtC,6EAOA;QAJE,+LACsC,CAAC,aAAa,CAAC,WAC5D,CAAC,qBAAO;QALH,4DAOA;QAAA,6EAAuB;QAAA,iEAAK;QAAA,4DAAQ;QACpC,6EAOA;QAJE,+LACsC,CAAC,aAAa,CAAC,WAC3D,CAAC,oBAAM;QALH,4DAOA;QAAA,2EAAgD;QAA5B,4IAAS,qBAAiB,IAAC;QAAC,0FAAK;QAAA,4DAAM;QAC7D,4DAAM;QACN,2EACE;QAAA,sEAAI;QAAA,6JAAiB;QAAA,4DAAK;QAC1B,2FAKkB;QAHhB,kLAAmB,iCAA6B,IAAC,8HAC5B,6BAAyB,IADG;QAGnD,4DAAkB;QAClB,qHACE;QAYJ,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAhHI,2DAAqC;QAArC,gGAAqC;QAOrC,0DAAyC;QAAzC,oGAAyC;QAOzC,0DAA2C;QAA3C,sGAA2C;QAO3C,0DAA6C;QAA7C,wGAA6C;QAO7C,0DAA0C;QAA1C,qGAA0C;QAO1C,0DAAuC;QAAvC,kGAAuC;QAOvC,0DAA4C;QAA5C,uGAA4C;QAM5C,0DAAgD;QAAhD,2GAAgD;QAMhD,0DAA+C;QAA/C,0GAA+C;QAM/C,0DAA6C;QAA7C,wGAA6C;QAO7C,0DAA4D;QAA5D,uHAA4D;QAO5D,0DAEC;QAFD,mIAEC;QAMD,0DAEC;QAFD,kIAEC;QAYuB,0DAAqB;QAArB,mFAAqB;;6FDlF1C,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;ifAI0B,mBAAmB;kBAA3C,uDAAS;mBAAC,YAAY;;;;;;;;;;;;;;AE7BzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACqB;AACD;AACW;;;AACvE,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,gFAAiB,EAAE;CAC/C;AAMM,MAAM,aAAa;;4FAAb,aAAa;oJAAb,aAAa,kBAHf,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,aAAa,uFAFd,4DAAY;6FAEX,aAAa;cAJzB,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAOsB;;;;;;;ICJpB,yEAKE;IAFA,+TAAgC;IAEhC,oHACF;IAAA,4DAAM;;ADQD,MAAM,mBAAmB;IAM9B,YAAmB,EAAqB,EAAS,EAAuB;QAArD,OAAE,GAAF,EAAE,CAAmB;QAAS,OAAE,GAAF,EAAE,CAAqB;QAL9D,gBAAW,GAAsB,IAAI,0DAAY,EAAO;QACxD,aAAQ,GAAsB,IAAI,0DAAY,EAAO;QACrD,aAAQ,GAAsB,IAAI,0DAAY,EAAO;QACrD,aAAQ,GAAsB,IAAI,0DAAY,EAAO;IAEY,CAAC;IAE5E,QAAQ,KAAU,CAAC;IAEnB,iBAAiB;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;IACzB,CAAC;IAED,eAAe;QACb,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE;IACrC,CAAC;IAED,oBAAoB;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACtD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxB,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,eAAe;QACb,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IACtB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IACtB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IACtB,CAAC;;sFAnCU,mBAAmB;mGAAnB,mBAAmB;QCjBhC,yEACE;QAAA,yEAAkD;QAA9B,wIAAS,uBAAmB,IAAC;QAAC,wHAAW;QAAA,4DAAM;QACnE,yEAAgD;QAA5B,wIAAS,qBAAiB,IAAC;QAAC,yFAAK;QAAA,4DAAM;QAC3D,+GAKE;QAEF,yEAAgD;QAA5B,wIAAS,qBAAiB,IAAC;QAAC,+FAAM;QAAA,4DAAM;QAC5D,yEAAgD;QAA5B,wIAAS,qBAAiB,IAAC;QAAC,qGAAO;QAAA,4DAAM;QAC/D,4DAAM;;QAPF,0DAAyB;QAAzB,uFAAyB;;6FDYhB,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;8OAEW,WAAW;kBAApB,oDAAM;YACG,QAAQ;kBAAjB,oDAAM;YACG,QAAQ;kBAAjB,oDAAM;YACG,QAAQ;kBAAjB,oDAAM;;;;;;;;;;;;;;AErBT;AAAA;AAAA;AAAA;AAAA;AAA8E;;;;;;ICC5E,uEACE;IAAA,yEAA0D;IAAzB,+TAAwB;IAAC,qGAAO;IAAA,4DAAM;IACzE,4DAAO;;ADKF,MAAM,0BAA0B;IAMrC,YAAoB,EAAwB;QAAxB,OAAE,GAAF,EAAE,CAAsB;QAHnC,cAAS,GAAY,KAAK;QACzB,iBAAY,GAAyB,IAAI,0DAAY,EAAU;IAE1B,CAAC;IAEhD,QAAQ,KAAU,CAAC;IAEnB,YAAY;QACV,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,MAAe;QACxB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IAC5B,CAAC;;oGAhBU,0BAA0B;0GAA1B,0BAA0B;QCRvC,yEACE;QAAA,wHACE;QAEF,yEACE;QAAA,oEACA;QAAA,yEACE;QAAA,uDACF;QAAA,4DAAM;QAEN,yEAAyB;QAAA,uDAAoC;QAAA,4DAAM;QACnE,yEACE;QAAA,yEAAqD;QAAjC,+IAAS,8BAAsB,IAAC;QAAC,0IAAa;QAAA,4DAAM;QACxE,0EAAoB;QAAA,8HAAW;QAAA,4DAAM;QACvC,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAfE,0DAAiB;QAAjB,+EAAiB;QAMnB,0DACF;QADE,0JACF;QAEyB,0DAAoC;QAApC,0GAAoC;;6FDFpD,0BAA0B;cALtC,uDAAS;eAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,WAAW,EAAE,sCAAsC;gBACnD,SAAS,EAAE,CAAC,sCAAsC,CAAC;aACpD;qJAEU,UAAU;kBAAlB,mDAAK;YACG,WAAW;kBAAnB,mDAAK;YACG,SAAS;kBAAjB,mDAAK;YACI,YAAY;kBAArB,oDAAM;;;;;;;;;;;;;;AEZT;AAAA;AAAA;AAAmD;;AAK5C,MAAM,YAAY;IACvB,SAAS,CAAC,KAAU;QAClB,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC3B,CAAC;;wEAHU,YAAY;0GAAZ,YAAY;6FAAZ,YAAY;cAHxB,kDAAI;eAAC;gBACJ,IAAI,EAAE,UAAU;aACjB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAmD;;AAK5C,MAAM,cAAc;IACzB,SAAS,CAAC,KAAU;QAClB,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,CAAC;;4EAHU,cAAc;8GAAd,cAAc;6FAAd,cAAc;cAH1B,kDAAI;eAAC;gBACJ,IAAI,EAAE,YAAY;aACnB;;;;;;;;;;;;;;;;;;;;;;;;;;ACJyC;AAEoB;AAChB;AAEf;AACgB;AACG;;;;AAIlD,MAAM,WAAW,GAAG,IAAI,gEAAW,EAAE;AAI9B,MAAM,oBAAoB;IAO/B,YAAoB,IAAgB,EAAU,EAAiB;QAA3C,SAAI,GAAJ,IAAI,CAAY;QAAU,OAAE,GAAF,EAAE,CAAe;QALvD,oBAAe,GAAG,kBAAkB;QA+F5C,oBAAe,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,SAAS,EAAE,QAAQ,GAAG,SAAS,EAAE,EAAE;YAChE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YAC/B,IAAI,cAAc;YAElB,IAAI,CAAC,CAAC,GAAG,EAAE;gBACT,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;aACpC;iBAAM,IAAI,CAAC,CAAC,QAAQ,EAAE;gBACrB,IAAI,QAAQ,GAAG,IAAI,0CAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;gBACnE,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;aACzC;YAED,IACE,cAAc,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,SAAS;gBACtC,cAAc,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,SAAS;cAClC;gBACA,OAAO,KAAK;aACb;YACD,OAAO,IAAI;QACb,CAAC;QAEO,qBAAgB,GAAG,CAAC,UAAU,EAAE,EAAE;YACxC,IAAI,UAAU,CAAC,MAAM,GAAG,EAAE,KAAK,CAAC,EAAE;gBAChC,MAAM,aAAa,GACjB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC,MAAM;gBAC3D,MAAM,eAAe,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxD,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;aACrD;YACD,OAAO,UAAU;QACnB,CAAC;QAEO,2BAAsB,GAAG,CAAC,QAAQ,EAAE,EAAE;YAC5C,MAAM,OAAO,GAAgB,IAAI,WAAW,EAAE;YAC9C,MAAM,cAAc,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;YACzC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC;YAC5C,OAAO,cAAc;QACvB,CAAC;QA5HC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAClC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG;YACb,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBACzB,IAAI,CAAC,GAAG,GAAG,IAAI,0CAAS,CACtB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CACjD;gBACD,gCAAgC;gBAChC,iEAAiE;gBACjE,uBAAuB;gBACvB,MAAM;aACP;IACL,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,gCAAgC;QAChC,iEAAiE;QACjE,uBAAuB;QACvB,MAAM;IACR,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI;aAClB,IAAI,CACH,GAAG,wDAAU,iBAAiB,EAC9B,EAAE,IAAI,EAAE,0DAAU,CAAC,SAAS,EAAE,EAC9B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CACH,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,EAC3C,4DAAK,EAAE,CACR;aACA,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;YAChB,IAAI,GAAG;gBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;YAEvC,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACN,CAAC;IAED,MAAM,CAAC,IAAY;QACjB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,GAAG,GAAG,IAAI,0CAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,EAAC,4BAA4B;QAC7F,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC;QAE9B,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI;aAClB,IAAI,CACH,GAAG,wDAAU,iBAAiB,EAC9B,EAAE,IAAI,EAAE,0DAAU,CAAC,YAAY,EAAE,EACjC,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;aACjD,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACN,CAAC;IAED,MAAM,CAAC,IAAS,EAAE,QAAQ,GAAG,SAAS;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QACxC,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,4CAAW,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAElE,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;QAC9C,IAAI,eAAe,GAAG,EAAE;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAChD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;YACpD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;YAC9C,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;SAC9D;QACD,OAAO,eAAe;IACxB,CAAC;IAED,MAAM,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS;QAC/B,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QAElC,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE;YACxC,IAAI,cAAc,GAAG,EAAE;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;gBAC9C,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;aAC5D;YACD,IAAI,SAAS,GAAG,4CAAW,CAAC,IAAI;iBAC7B,SAAS,CAAC,cAAc,CAAC;iBACzB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;YACrB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YAC/B,OAAO,GAAG;SACX;;YAAM,OAAO,0BAA0B;IAC1C,CAAC;IAuCD,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe;IAC7B,CAAC;;wFAxIU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAAA;AAA0C;;;AAQnC,MAAM,iBAAiB;IAM5B,YAAmB,EAAkB;QAAlB,OAAE,GAAF,EAAE,CAAgB;IAAG,CAAC;IAEzC,eAAe;QACb,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC;IACnD,CAAC;IAED,gBAAgB,CAAC,KAAa;QAC5B,IAAI,CAAC,aAAa,GAAG,KAAK;IAC5B,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B,CAAC;IAED,oBAAoB,CAAC,SAA8B;QACjD,IAAI,CAAC,iBAAiB,GAAG,SAAS;IACpC,CAAC;IAED,sBAAsB,CAAC,SAA8B;QACnD,IAAI,CAAC,mBAAmB,GAAG,SAAS;IACtC,CAAC;IAED,6BAA6B,CAAC,MAAgB;QAC5C,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAClD,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,KAAK,CAAC;QACtD,CAAC,CAAC;IACJ,CAAC;IAED,aAAa;QACX,IAAI,SAAS,GAAa,IAAI,CAAC,iBAAiB,CAAC,UAAU;QAC3D,IAAI,WAAW,GAAa,IAAI,CAAC,mBAAmB,CAAC,UAAU;QAE/D,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE;YAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBACxB,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;gBACvD,WAAW,EAAE,KAAK;aACnB,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,eAAe;QACb,IAAI,CAAC,eAAe,GAAG,EAAE;IAC3B,CAAC;IAED,uBAAuB,CAAC,MAAgB;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC9B,MAAM,WAAW,GAAG,KAAK,CAAC,eAAe;YACzC,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,SAAS;YAC5D,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAC/B,cAAc,CACf,CAAC,eAAe,GAAG,WAAW;QACjC,CAAC,CAAC;IACJ,CAAC;;kFA7DU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;6FAEP,iBAAiB;cAH7B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AASnC,MAAM,iBAAiB;IAG5B,YACS,KAA0B,EAC1B,EAAqB;QADrB,UAAK,GAAL,KAAK,CAAqB;QAC1B,OAAE,GAAF,EAAE,CAAmB;QAHtB,SAAI,GAAa,EAAE;IAIxB,CAAC;IAEJ,SAAS,CAAC,MAAgB,EAAE,eAAwB,KAAK;QACvD,MAAM,GAAG,MAAM,CAAC,MAAM,CACpB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CACrE;QACD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,EAAE,CAAC,6BAA6B,CAAC,MAAM,CAAC;YAE7C,IAAI,YAAY;gBAAE,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,MAAM,CAAC;YAEzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;YACvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,OAAO,EACP,mCAAmC,MAAM,CAAC,MAAM,KAAK,CACtD;SACF;;YACC,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,UAAU,EACV,uDAAuD,CACxD;IACL,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,GAAG,KAAK;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAC1B,IAAI,CAAC,EAAE,CAAC,6BAA6B,CAAC,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI;IAClB,CAAC;;kFAvCU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;6FAEP,iBAAiB;cAH7B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;;;ACRyC;AACC;AACiC;AAM1B;;;;;AAGlD,MAAM,WAAW,GAAG,IAAI,gEAAW,EAAE;AAK9B,MAAM,cAAc;IACzB,YACU,IAAgB,EAChB,MAAc,EACf,EAAwB;QAFvB,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAQ;QACf,OAAE,GAAF,EAAE,CAAsB;IAC9B,CAAC;IAEJ,YAAY;QACV,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAe,GAAG,wDAAU,iBAAiB,CAAC;aACjD,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,iBAAiB,CAAC,OAAe;QAC/B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,oBAAoB,EACjC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,EAC3B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,qBAAqB,CAAC,QAAgB;QACpC,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,wBAAwB,EACrC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,CAAC,EAC5B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,oBAAoB,CAAC,WAAmB;QACtC,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,yBAAyB,EACtC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,EAC/B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,eAAe,CAAC,MAAe;QAC7B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,oBAAoB,EACjC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,EAC1B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,gBAAgB,EAC7B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EACzB,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,mBAAmB,EAChC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EACzB,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,mBAAmB,EAChC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EACzB,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,YAAY,CAAC,UAAe;QAC1B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,gBAAgB,EAC7B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,CAAC,EAC9B,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;IAED,YAAY,CAAC,UAAe;QAC1B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,gBAAgB,EAC7B,EAAE,UAAU,EAAE,EACd,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;IACtD,CAAC;;4EArGU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;;;ACfyC;AACC;AACiC;AAE1B;;;;;AAGlD,MAAM,WAAW,GAAG,IAAI,gEAAW,EAAE;AAK9B,MAAM,SAAS;IAGpB,YACU,IAAgB,EAChB,MAAc,EACf,EAAwB;QAFvB,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAQ;QACf,OAAE,GAAF,EAAE,CAAsB;QALjC,eAAU,GAAG,KAAK;IAMf,CAAC;IAEJ,KAAK,CAAC,SAAc;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI;aAClB,IAAI,CAAM,GAAG,wDAAU,QAAQ,EAAE,SAAS,EAAE;YAC3C,OAAO,EAAE,WAAW;YACpB,YAAY,EAAE,MAAM;SACrB,CAAC;aACD,IAAI,CAAC,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,CAAC;aACjD,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;YAChB,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,GAAG;YAE9B,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBACvB,IAAI,CAAC,UAAU,GAAG,IAAI;gBAEtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC9B,GAAG,CAAC,WAAW,EAAE;aAClB;QACH,CAAC,CAAC;IACN,CAAC;;kEA5BU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAA0C;;AAMnC,MAAM,mBAAmB;IAG9B,gBAAe,CAAC;IAEhB,OAAO,CAAC,MAAc,EAAE,OAAe;QACrC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC;IAC7C,CAAC;IAED,OAAO,CAAC,MAAc,EAAE,OAAe;QACrC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,MAAc,EAAE,OAAe;QACnC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC;IAC3C,CAAC;;sFAfU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAA;AAA0C;AAIuB;AACT;;AAKjD,MAAM,mBAAmB;IAE9B,gBAAe,CAAC;IAEhB,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,aAAa,mCAAQ,yDAAU,KAAE,OAAO,EAAE,EAAE,GAAE;QAC7D,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,sGAAkB,CAAC,OAAO;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK;QACpC,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,sGAAkB,CAAC,QAAQ;QACpD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;;sFAdU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAA0C;AAIuC;;AAK1E,MAAM,mBAAmB;IAE9B,gBAAe,CAAC;IAEhB,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,mHAAe,CAAC,UAAU;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,mHAAe,CAAC,UAAU;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;;sFAZU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAIyB;AACR;AAGb;;;;;AAQvC,MAAM,oBAAoB;IAG/B,YACS,EAAkB,EAClB,EAAa,EACb,EAAwB;QAFxB,OAAE,GAAF,EAAE,CAAgB;QAClB,OAAE,GAAF,EAAE,CAAW;QACb,OAAE,GAAF,EAAE,CAAsB;IAC9B,CAAC;IAEJ,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,cAAc,mCAAQ,2DAAW,KAAE,UAAU,EAAE,EAAE,GAAE;QAClE,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,yGAAmB,CAAC,OAAO;QACpD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;IAED,UAAU,CAAC,MAAe;QACxB,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE;aAChB,qBAAqB,CAAC,MAAM,CAAC,EAAE,CAAC;aAChC,SAAS,CAAC,CAAC,GAAiB,EAAE,EAAE;YAC/B,IAAI,UAAU,GAAiB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;YACvD,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBACrB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAiB,EAAE,EAAE;oBACrC,OAAO,CAAC,KAAK,GAAG,uDAAS,CAAC,QAAQ;gBACpC,CAAC,CAAC;gBACF,GAAG,CAAC,KAAK,GAAG,uDAAS,CAAC,QAAQ;YAChC,CAAC,CAAC;YACF,MAAM,CAAC,UAAU,GAAG,UAAU;YAE9B,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,yGAAmB,CAAC,QAAQ;YACrD,IAAI,CAAC,SAAS,CAAC,cAAc,mCACxB,MAAM,KACT,UAAU,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,GACnC;YACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;YAE9C,GAAG,CAAC,WAAW,EAAE;QACnB,CAAC,CAAC;IACN,CAAC;;wFArCU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;;ACfyC;AAGoB;AACZ;AAEA;;;;AAElD,MAAM,WAAW,GAAG,IAAI,gEAAW,EAAE;AAI9B,MAAM,oBAAoB;IAG/B,YAAoB,IAAgB,EAAS,EAAwB;QAAjD,SAAI,GAAJ,IAAI,CAAY;QAAS,OAAE,GAAF,EAAE,CAAsB;IAAG,CAAC;IAEzE,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;IAChD,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,GAAG,wDAAU,SAAS,EACtB,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EACtC,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,CAC/C;aACA,IAAI,CACH,iEAAU,CAAC,CAAO,GAAG,EAAE,EAAE,CAAC,2GAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAC,EAC3C,4DAAK,EAAE,CACR;IACL,CAAC;;wFApBU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA,MAAM,WAAW,GAAG;IAClB,WAAW,EAAE,IAAI;IACjB,WAAW,EAAE,WAAW;IACxB,QAAQ,EAAE,KAAK;CAChB;AAEM,MAAM,UAAU,GAAG,UAAU,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,EAAE;;;;;;;;;;;;;ACNhH;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB;AAED;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA8C;AAIU;;;AAExD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE;CACjB;AAED,2EAAwB,gBACN,CAAC,0DAAU;KAC1B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, ElementRef } from '@angular/core'\nimport { alertTypes } from './alert.types.dto'\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n})\nexport class AlertComponent implements OnInit {\n  element\n  alertTypeClass: string = alertTypes.success\n  alertHeader: string = 'Header'\n  alertMessage: string = 'Message'\n  alertShowingTime = 5000\n  constructor(private el: ElementRef) {\n    this.element = el.nativeElement\n    this.closeAlert()\n  }\n\n  ngOnInit(): void {}\n\n  showWarn(head: string, message: string) {\n    this.alertTypeClass = alertTypes.warn\n    this.showAlert(head, message)\n  }\n\n  showSuccess(head: string, message: string) {\n    this.alertTypeClass = alertTypes.success\n    this.showAlert(head, message)\n  }\n\n  showError(head: string, message: string) {\n    this.alertTypeClass = alertTypes.error\n    this.showAlert(head, message)\n  }\n\n  showAlert(head: string, message: string) {\n    this.element.style.display = 'block'\n    this.alertHeader = head\n    this.alertMessage = message\n    setTimeout(() => {\n      this.closeAlert()\n    }, this.alertShowingTime)\n  }\n\n  closeAlert() {\n    this.element.style.display = 'none'\n  }\n}\n","<div [class]=\"'alertContainer ' + alertTypeClass\">\n  <div class=\"button closeButton\" (click)=\"closeAlert()\">X</div>\n  <div class=\"alertHeader\">\n    <h3>{{ alertHeader }}</h3>\n  </div>\n  <div class=\"alertBody\">\n    <p>{{ alertMessage }}</p>\n  </div>\n</div>\n","export const alertTypes = {\n  error: 'error',\n  success: 'success',\n  warn: 'warn',\n}\n","import { Component, ViewChild, AfterViewInit } from '@angular/core'\nimport { PgService } from './services/pg-services/pg.service'\n\nimport { EventManagerService } from './services/window-managers/event-manager.service'\nimport { EventManagerComponent } from './modalWindows/event-manager/event-manager.component'\n\nimport { PersonManagerService } from './services/window-managers/person-manager.service'\nimport { PersonManagerComponent } from './modalWindows/person-manager/person-manager.component'\n\nimport { IPerson } from './dto/person.dto'\n\nimport { ImportExportService } from './services/window-managers/import-export.service'\nimport { ImportExportManagerComponent } from './modalWindows/import-export-manager/import-export-manager.component'\n\nimport { AlertComponent } from './alert/alert.component'\nimport { AlertManagerService } from './services/window-managers/alert-manager.service'\n\nimport { SearchManagerService } from './services/window-managers/search-manager.service'\nimport { SearchEventComponent } from './main-page/search-event/search-event.component'\nimport { SearchManagerComponent } from './modalWindows/search-manager/search-manager.component'\nimport { ImportPoolComponent } from './import-pool/import-pool.component'\nimport { ImportPoolService } from './services/import-pool.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements AfterViewInit {\n  title = 'Записная книжка 2.0'\n  @ViewChild('eventManager') eventManager: EventManagerComponent\n  @ViewChild('personManager') personManager: PersonManagerComponent\n  @ViewChild('importExportManager') ieManager: ImportExportManagerComponent\n  @ViewChild('alert') alert: AlertComponent\n  @ViewChild('searchManager') search: SearchManagerComponent\n  @ViewChild('importPool') importPool: ImportPoolComponent\n\n  constructor(\n    public pg: PgService,\n    public em: EventManagerService,\n    public pm: PersonManagerService,\n    public ie: ImportExportService,\n    public as: AlertManagerService,\n    public sm: SearchManagerService,\n    public ip: ImportPoolService\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.em.component = this.eventManager\n    this.pm.component = this.personManager\n    this.ie.component = this.ieManager\n    this.as.component = this.alert\n    this.sm.component = this.search\n    this.ip.component = this.importPool\n  }\n\n  checkRouterState() {\n    if (document.location.pathname !== '/login') return true\n    else return false\n  }\n\n  addPersontoEvent(person: IPerson) {\n    this.eventManager.addPersonToEvent(person)\n  }\n\n  openAddEvent() {\n    this.em.openAddEM()\n  }\n\n  openImport() {\n    this.ie.openImport()\n  }\n\n  openExport() {\n    this.ie.openExport()\n  }\n\n  openSearch() {\n    this.sm.openSearch()\n  }\n}\n","<h1 class=\"header\">Записная книжка 2.0</h1>\n<div *ngIf=\"checkRouterState()\">\n  <app-options-bar\n    (ondAddEvent)=\"openAddEvent()\"\n    (onImport)=\"openImport()\"\n    (onExport)=\"openExport()\"\n    (onSearch)=\"openSearch()\"\n  ></app-options-bar>\n</div>\n<app-person-manager #personManager (personIsAdded)=\"addPersontoEvent($event)\">\n</app-person-manager>\n<app-import-export-manager #importExportManager> </app-import-export-manager>\n<app-alert #alert></app-alert>\n<app-search-manager #searchManager> </app-search-manager>\n<app-import-pool #importPool></app-import-pool>\n<app-event-manager #eventManager> </app-event-manager>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser'\nimport { RoutingModule } from './modules/routing/routing.module'\n\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component'\n\nimport { CookieService } from 'ngx-cookie-service'\n\nimport { LoginComponent } from './login/login.component'\nimport { MainPageComponent } from './main-page/main-page.component'\nimport { JsonKeysPipe } from './pipes/json-keys.pipe'\nimport { JsonValuesPipe } from './pipes/json-values.pipe'\nimport { PersonBrowserCardComponent } from './person-browser-card/person-browser-card.component'\nimport { SearchEventComponent } from './main-page/search-event/search-event.component'\nimport { SearchPipePipe } from './main-page/pipes/search-pipe.pipe'\nimport { OptionsBarComponent } from './options-bar/options-bar.component'\nimport { EventManagerComponent } from './modalWindows/event-manager/event-manager.component'\nimport { PersonManagerComponent } from './modalWindows/person-manager/person-manager.component'\nimport { ImportExportManagerComponent } from './modalWindows/import-export-manager/import-export-manager.component'\nimport { AlertComponent } from './alert/alert.component'\nimport { SearchManagerComponent } from './modalWindows/search-manager/search-manager.component'\nimport { EventTableComponent } from './event-table/event-table.component'\nimport { ImportPoolComponent } from './import-pool/import-pool.component'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    MainPageComponent,\n    JsonKeysPipe,\n    JsonValuesPipe,\n    PersonBrowserCardComponent,\n    SearchEventComponent,\n    SearchPipePipe,\n    OptionsBarComponent,\n    EventManagerComponent,\n    PersonManagerComponent,\n    ImportExportManagerComponent,\n    AlertComponent,\n    SearchManagerComponent,\n    EventTableComponent,\n    ImportPoolComponent,\n  ],\n  imports: [\n    BrowserModule,\n    RoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ],\n  providers: [CookieService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { stateFlag } from './flag.dto'\n\nexport interface IContact {\n  id: null | number\n  number: null | string\n  oldnum: null | boolean\n  internum: null | boolean\n  alias: null | string\n  telephone_id?: number\n  state: stateFlag\n}\n\nexport const emptyContact: IContact = {\n  id: null,\n  alias: '',\n  internum: false,\n  number: '',\n  oldnum: false,\n  state: stateFlag.isReaded,\n}\n","export const statusCode = {\n  updateKey: 2414,\n  keyIsUpdated: 4142,\n}\n","import { IPerson } from './person.dto'\nimport { stateFlag } from './flag.dto'\n\nexport interface IEvent {\n  additional: string | null\n  category: string | null\n  detention_by: string | null\n  detention_date: string | null\n  detention_reason: string | null\n  detention_time: string | null\n  id: number | null\n  keeping_place: string | null\n  persons: IPerson[]\n  state: stateFlag\n  importPoolState: boolean\n}\n\nexport const IEventHeaders = {\n  id: 'ID',\n  category: 'Категория',\n  detention_by: 'Кем задержан',\n  detention_reason: 'Повод задержания',\n  keeping_place: 'Место хранения',\n  detention_date: 'Дата задержания',\n  detention_time: 'Время задержания',\n  additional: 'Дополнительная информация',\n  buttons: ' ',\n}\n\nexport const emptyEvent = {\n  additional: '',\n  category: '',\n  detention_by: '',\n  detention_date: '',\n  detention_reason: '',\n  detention_time: '',\n  id: null,\n  keeping_place: '',\n  persons: [] as IPerson[],\n  state: stateFlag.isReaded,\n  importPoolState: false,\n}\n","export enum stateFlag {\n  isReaded,\n  isUpdated,\n  isAdded,\n  isRemoved,\n}\n","import { ITelephone } from './telephone.dto'\nimport { stateFlag } from './flag.dto'\n\nexport interface IPerson {\n  id: number\n  lastname: string | null\n  name: string | null\n  midname: string | null\n  alias: string | null\n  telephones: ITelephone[]\n  state: stateFlag\n}\n\nexport const IPersonHeaders = {\n  id: 'ID',\n  lastname: 'Фамилия',\n  name: 'Имя',\n  midname: 'Отчество',\n  alias: 'Кличка',\n}\n\nexport const emptyPerson: IPerson = {\n  alias: '',\n  lastname: '',\n  midname: '',\n  name: '',\n  id: null,\n  telephones: [],\n  state: stateFlag.isReaded,\n}\n","import { IContact } from './contact.dto'\nimport { stateFlag } from './flag.dto'\n\nexport interface ITelephone {\n  id: null | number\n  number: null | string\n  oldnum: null | boolean\n  internum: null | boolean\n  contacts: IContact[]\n  person_id: number\n  state: stateFlag\n}\n\nexport const emptyTelephone = {\n  id: null,\n  number: '',\n  oldnum: null,\n  internum: null,\n  contacts: [],\n  person_id: null,\n  state: stateFlag.isReaded,\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { IEvent, IEventHeaders, emptyEvent } from '../dto/event.dto'\nimport { stateFlag } from '../dto/flag.dto'\nimport { PgQueryService } from '../services/pg-services/pg-query.service'\nimport { CryptoManagerService } from '../services/crypto-manager.service'\nimport { EventManagerService } from '../services/window-managers/event-manager.service'\nimport { IPerson } from '../dto/person.dto'\nimport { EventTableService } from '../services/event-table.service'\nimport { ImportPoolService } from '../services/import-pool.service'\n\nexport enum eventTableStates {\n  mainPage,\n  searchPage,\n  importPage,\n}\n\n@Component({\n  selector: 'app-event-table',\n  templateUrl: './event-table.component.html',\n  styleUrls: ['./event-table.component.scss'],\n})\nexport class EventTableComponent implements OnInit {\n  @Input() searchNumber: number\n  @Output() eventIsSelected: EventEmitter<boolean> = new EventEmitter<boolean>()\n  @Output() eventTableIsEmpty: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >()\n\n  eventTable: IEvent[] = []\n  eventTableHeaders = IEventHeaders\n\n  selectedEvent: IEvent = { ...emptyEvent, persons: [] }\n  isEventSelected: boolean = false\n\n  eventTableState: eventTableStates\n  isEmptyResponce = false\n\n  constructor(\n    public pgQ: PgQueryService,\n    public cm: CryptoManagerService,\n    public em: EventManagerService,\n    public et: EventTableService,\n    public im: ImportPoolService\n  ) {}\n\n  ngOnInit(): void {\n    this.eventTableState = eventTableStates.mainPage\n  }\n\n  getAllEvents() {\n    const sub = this.pgQ.getAllEvents().subscribe((res: Uint8Array[]) => {\n      let events: IEvent[] = this.cm.decode(res).rows\n      this.eventTable = events.map((ev) => {\n        ev['persons'] = []\n        ev['state'] = stateFlag.isReaded\n        ev['importPoolState'] = false\n        return ev\n      })\n      sub.unsubscribe()\n    })\n  }\n\n  onOpenEditEventMenu(event: IEvent, i: number) {\n    this.em.openEditEM(event)\n  }\n\n  eventTableRowPainter(selectedRow: HTMLCollection) {\n    //remove old selection\n    Array.from(document.getElementsByClassName(`selected`)).forEach((node) => {\n      node.className = node.className.substring(\n        0,\n        node.className.indexOf('selected') - 1\n      )\n    })\n    //and add new\n    Array.from(selectedRow).forEach((node) => {\n      node.className += ' selected'\n    })\n  }\n\n  onEventTableClicked(e: IEvent, index: number) {\n    this.eventIsSelected.emit(true)\n    this.et.setSelectedEvent(e)\n    this.selectedEvent = e\n    this.isEventSelected = true\n\n    this.eventTableRowPainter(\n      document.getElementsByClassName(\n        `${index} cell ${this.eventTableState === 0 ? 'main' : 'search'}`\n      )\n    )\n    const sub = this.pgQ\n      .getPersonsOfEvent(e.id)\n      .subscribe((res: Uint8Array[]) => {\n        let persons: IPerson[] = this.cm.decode(res).rows\n\n        persons = persons.map((per: IPerson) => {\n          per.state = stateFlag.isReaded\n          return per\n        })\n        this.selectedEvent.persons = e.persons = persons\n        sub.unsubscribe()\n      })\n  }\n\n  setEventTable(et: IEvent[]) {\n    this.eventTable = [...et]\n    if (et.length === 0) this.eventTableIsEmpty.emit(true)\n    else this.eventTableIsEmpty.emit(false)\n  }\n\n  setEmptySearchFlag(flag: boolean) {\n    this.isEmptyResponce = flag\n  }\n\n  getEmptySearchFlag() {\n    return this.isEmptyResponce\n  }\n\n  importPageRowHandler(event: IEvent) {\n    if (\n      !!this.eventTableState &&\n      this.eventTableState === eventTableStates.importPage\n    ) {\n      return event.importPoolState\n    } else return true\n  }\n\n  isMainPage() {\n    return this.eventTableState === eventTableStates.mainPage\n  }\n\n  isSearchPage() {\n    return this.eventTableState === eventTableStates.searchPage\n  }\n\n  isMainPageHeaderHandler(keyOfHeader: string) {\n    if (keyOfHeader === 'buttons') {\n      if (!this.isMainPage() && !this.isSearchPage()) return false\n    }\n    return true\n  }\n\n  setTableState(state: eventTableStates) {\n    this.eventTableState = state\n  }\n\n  importTablePainter(event: IEvent) {\n    const index = this.eventTable.findIndex((e) => e.id === event.id)\n    // const className = event.importPoolState ?'in' :'out'\n    Array.from(\n      document.getElementsByClassName(\n        `${index} cell ${this.eventTableState === 0 ? 'main' : 'search'}`\n      )\n    ).forEach((node) => {\n      node.className += ' '\n      if (node.className.indexOf(' in ') !== -1)\n        node.className = node.className.replace(' in ', ' out ')\n      else if (node.className.indexOf(' out ') !== -1)\n        node.className = node.className.replace(' out ', ' in ')\n    })\n  }\n\n  importEventClicked(event: IEvent) {\n    this.im.addToPool([event])\n    // this.importTablePainter(event)\n  }\n\n  removeFromPoolClicked(event: IEvent) {\n    this.im.removeFromPool(event)\n    // this.importTablePainter(event)\n  }\n}\n","<div class=\"eventTable\" *ngIf=\"eventTable.length !== 0; else emptyTableBlock\">\n  <div class=\"column\" *ngFor=\"let keyOfHeader of eventTableHeaders | jsonKeys\">\n    <span *ngIf=\"isMainPageHeaderHandler(keyOfHeader)\">\n      <div\n        [ngClass]=\"{\n          header: true,\n          dopInfoHeader: keyOfHeader === 'additional',\n          buttonsHeader: keyOfHeader === 'buttons'\n        }\"\n      >\n        {{ eventTableHeaders[keyOfHeader] }}\n      </div>\n      <div\n        *ngFor=\"\n          let event of eventTable | searchPipe: searchNumber;\n          let i = index\n        \"\n      >\n        <div\n          [class]=\"\n            'cell' +\n            ' ' +\n            i +\n            ' ' +\n            (eventTableState === 0 ? 'main' : 'search') +\n            ' ' +\n            (event.importPoolState ? 'in' : 'out') +\n            ' '\n          \"\n          (click)=\"onEventTableClicked(event, i)\"\n          (dblclick)=\"onOpenEditEventMenu(event, i)\"\n          *ngIf=\"importPageRowHandler(event)\"\n        >\n          <ng-container\n            [ngTemplateOutlet]=\"\n              keyOfHeader !== 'buttons' ? cellContent : buttonsLayout\n            \"\n            [ngTemplateOutletContext]=\"{\n              event: event,\n              i: i,\n              keyOfHeader: keyOfHeader\n            }\"\n          >\n          </ng-container>\n        </div>\n      </div>\n    </span>\n  </div>\n</div>\n<ng-template #emptyTableBlock>\n  <div\n    *ngIf=\"isEmptyResponce; else searchStartMessage\"\n    class=\"emptyTableMessage\"\n  >\n    <h2>По данному запросу ничего не найдено</h2>\n  </div>\n</ng-template>\n<ng-template #searchStartMessage>\n  <div class=\"emptyTableMessage\">\n    <h2>Выполните поиск</h2>\n  </div>\n</ng-template>\n\n<ng-template #cellContent let-event=\"event\" let-keyOfHeader=\"keyOfHeader\">\n  {{ event[keyOfHeader] }}\n</ng-template>\n\n<ng-template #buttonsLayout let-event=\"event\" let-i=\"i\">\n  <div class=\"buttonsLayout\">\n    <div class=\"button\" (click)=\"onOpenEditEventMenu(event, i)\">Edit</div>\n\n    <span *ngIf=\"!isSearchPage()\">\n      <div\n        class=\"button\"\n        *ngIf=\"!event.importPoolState\"\n        (click)=\"importEventClicked(event)\"\n      >\n        Import\n      </div>\n      <div\n        class=\"button\"\n        *ngIf=\"event.importPoolState\"\n        (click)=\"removeFromPoolClicked(event)\"\n      >\n        RemovePool\n      </div>\n    </span>\n  </div>\n</ng-template>\n","import { Component, OnInit } from '@angular/core'\nimport { ImportPoolService } from '../services/import-pool.service'\n\n@Component({\n  selector: 'app-import-pool',\n  templateUrl: './import-pool.component.html',\n  styleUrls: ['./import-pool.component.scss'],\n})\nexport class ImportPoolComponent implements OnInit {\n  isOpened: boolean = false\n  constructor(public ip: ImportPoolService) {}\n\n  ngOnInit(): void {}\n\n  open() {\n    this.isOpened = !this.isOpened\n  }\n}\n","<div class=\"importPoolContainer\">\n  <div class=\"header\">\n    <div class=\"title\">Пул импорта ({{ ip.getPool().length }})</div>\n    <div class=\"button\" (click)=\"open()\">\n      {{ isOpened ? \"Скрыть\" : \"Открыть\" }}\n    </div>\n  </div>\n  <div class=\"body\" *ngIf=\"isOpened\">\n    <div *ngIf=\"ip.getPool().length === 0; else showPool\">\n      <h3>В пуле пока что отсутствуют записи</h3>\n    </div>\n    <ng-template #showPool>\n      <div class=\"poolTable\" *ngFor=\"let event of ip.getPool(); let i = index\">\n        <div class=\"poolRow\">\n          <div class=\"zkId\">#{{ event.id }}</div>\n          <div class=\"button\" (click)=\"ip.removeFromPool(event)\">Удалить</div>\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n","export const devloginData = {\n  host: 'localhost',\n  port: 5439,\n  user: 'postgres',\n  database: 'postgres',\n}\n","import { Component, OnInit } from '@angular/core'\nimport { PgService } from '../services/pg-services/pg.service'\nimport { FormGroup, FormControl } from '@angular/forms'\nimport { devloginData } from './devLoginDefaults'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm = new FormGroup({\n    host: new FormControl(devloginData.host),\n    port: new FormControl(devloginData.port),\n    database: new FormControl(devloginData.database),\n    user: new FormControl(devloginData.user),\n  })\n\n  constructor(public pg: PgService) {}\n\n  ngOnInit(): void {}\n\n  onLogin() {\n    this.pg.login(this.loginForm.value)\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n  <div class=\"legend\">Host:</div>\n  <input type=\"text\" formControlName=\"host\" />\n  <div class=\"legend\">Port:</div>\n  <input type=\"text\" formControlName=\"port\" />\n  <div class=\"legend\">database:</div>\n  <input type=\"text\" formControlName=\"database\" />\n  <div class=\"legend\">Username:</div>\n  <input type=\"text\" formControlName=\"user\" />\n  <button type=\"submit\">Login</button>\n</form>\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core'\nimport { PgQueryService } from '../services/pg-services/pg-query.service'\nimport { IEvent, IEventHeaders, emptyEvent } from '../dto/event.dto'\nimport { IPerson } from '../dto/person.dto'\nimport { PgService } from '../services/pg-services/pg.service'\nimport { EventManagerService } from '../services/window-managers/event-manager.service'\nimport { stateFlag } from '../dto/flag.dto'\nimport { EventTableService } from '../services/event-table.service'\nimport { CryptoManagerService } from '../services/crypto-manager.service'\nimport {\n  EventTableComponent,\n  eventTableStates,\n} from '../event-table/event-table.component'\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.scss'],\n})\nexport class MainPageComponent implements OnInit, AfterViewInit {\n  searchNumber: null | number = null\n  isSelectedEvent: boolean = false\n  @ViewChild('eventTable') eventTable: EventTableComponent\n\n  constructor(\n    public pgQ: PgQueryService,\n    public pg: PgService,\n    public em: EventManagerService,\n    public et: EventTableService,\n    public cm: CryptoManagerService\n  ) {}\n  ngAfterViewInit(): void {\n    this.eventTable.getAllEvents()\n    this.eventTable.setTableState(eventTableStates.mainPage)\n    this.et.setMainPageComponent(this.eventTable)\n  }\n\n  ngOnInit(): void {}\n\n  isEventGotPersons() {\n    return this.eventTable.selectedEvent.persons.length !== 0\n  }\n\n  isEventSelected() {\n    let state = false\n    if (!this.eventTable) return false\n    else !!this.eventTable.selectedEvent.persons\n  }\n\n  handleSearch(num: number) {\n    this.searchNumber = num\n  }\n\n  handleClear() {\n    this.searchNumber = null\n  }\n\n  eventIsSelected(state: boolean) {\n    this.isSelectedEvent = state\n  }\n}\n","<div class=\"mainPageContainer\">\n  <div class=\"eventBlock\">\n    <div class=\"search\">\n      <app-search-event\n        (search)=\"handleSearch($event)\"\n        (clear)=\"handleClear()\"\n      ></app-search-event>\n    </div>\n    <app-event-table\n      #eventTable\n      [searchNumber]=\"searchNumber\"\n      (eventIsSelected)=\"eventIsSelected($event)\"\n    >\n    </app-event-table>\n  </div>\n  <div class=\"personsBrowser\">\n    <div class=\"browserHeader\">\n      <label>Persons browser</label>\n    </div>\n    <div class=\"browserBody\">\n      <div *ngIf=\"isSelectedEvent; else eventIsNotSelected\">\n        <div *ngIf=\"isEventGotPersons(); else eventIsEmpty\">\n          <div\n            *ngFor=\"\n              let person of eventTable.selectedEvent.persons;\n              let personIndex = index\n            \"\n          >\n            <app-person-browser-card\n              [personData]=\"person\"\n              [personIndex]=\"personIndex\"\n              [removable]=\"false\"\n            ></app-person-browser-card>\n          </div>\n        </div>\n      </div>\n      <ng-template #eventIsNotSelected>\n        <div class=\"browserEmptyMessage\">Выберите событие</div>\n      </ng-template>\n      <ng-template #eventIsEmpty>\n        <div class=\"browserEmptyMessage\">\n          В выбранном событии нет фигурантов\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core'\nimport { IEvent } from 'src/app/dto/event.dto'\n\n@Pipe({\n  name: 'searchPipe',\n})\nexport class SearchPipePipe implements PipeTransform {\n  transform(tableData: IEvent[], searchId: number): unknown {\n    if (!!searchId) return tableData.filter((e) => e.id === searchId)\n    else return tableData\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core'\n\n@Component({\n  selector: 'app-search-event',\n  templateUrl: './search-event.component.html',\n  styleUrls: ['./search-event.component.scss'],\n})\nexport class SearchEventComponent implements OnInit {\n  @Output() search: EventEmitter<number> = new EventEmitter<number>()\n  @Output() clear: EventEmitter<number> = new EventEmitter<number>()\n  @Output() searchText = ''\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  oneEnterPressed(e: KeyboardEvent) {\n    if (e.key === 'Enter') this.searchOnEventTable()\n    else if (e.key === 'Escape') this.clearInput()\n    else return\n  }\n\n  searchOnEventTable() {\n    if (!!+this.searchText) this.search.emit(+this.searchText)\n  }\n\n  clearInput() {\n    this.searchText = ''\n    this.clear.emit(+this.searchText)\n  }\n}\n","<div class=\"searchContainer\">\n  <label>Поиск по ID</label>\n  <input\n    type=\"text\"\n    [value]=\"searchText\"\n    (keydown)=\"oneEnterPressed($event)\"\n    [(ngModel)]=\"searchText\"\n  />\n  <div class=\"button\" (click)=\"searchOnEventTable()\">Найти</div>\n</div>\n","import { Component, OnInit, ElementRef, AfterViewInit } from '@angular/core'\nimport { FormGroup, FormControl } from '@angular/forms'\nimport { IEvent, emptyEvent } from '../../dto/event.dto'\nimport { IPerson, emptyPerson } from '../../dto/person.dto'\nimport { PersonManagerService } from '../../services/window-managers/person-manager.service'\nimport { stateFlag } from '../../dto/flag.dto'\nimport { PgQueryService } from '../../services/pg-services/pg-query.service'\nimport { Router } from '@angular/router'\n\nexport enum eventManagerStates {\n  editMode,\n  addMode,\n}\n\n@Component({\n  selector: 'app-event-manager',\n  templateUrl: './event-manager.component.html',\n  styleUrls: ['./event-manager.component.scss'],\n})\nexport class EventManagerComponent implements OnInit {\n  element\n  public emState: eventManagerStates\n  editableEvent: IEvent = { ...emptyEvent, persons: [] }\n\n  constructor(\n    private el: ElementRef,\n    private pm: PersonManagerService,\n    public pq: PgQueryService,\n    private router: Router\n  ) {\n    this.element = el.nativeElement\n  }\n  ngOnInit(): void {\n    // Initial state\n    this.closeModal()\n  }\n\n  closeModal() {\n    this.element.style.display = 'none'\n  }\n\n  isEditMode() {\n    return this.emState === eventManagerStates.editMode\n  }\n\n  isAddMode() {\n    return this.emState === eventManagerStates.addMode\n  }\n\n  onAddEventClicked() {\n    this.editableEvent.state = stateFlag.isAdded\n    const sub = this.pq.setAddEvent(this.editableEvent).subscribe((res) => {\n      window.location.reload()\n      sub.unsubscribe()\n    })\n  }\n\n  onEditEventClicked() {\n    this.editableEvent.state = stateFlag.isUpdated\n    const sub = this.pq.setUpdateEvent(this.editableEvent).subscribe((res) => {\n      window.location.reload()\n      sub.unsubscribe()\n    })\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Escape') this.closeModal()\n    else return\n  }\n\n  onRemovePerson(personIndex: number) {\n    this.editableEvent.persons[personIndex].state = stateFlag.isRemoved\n    // this.editableEvent.persons.splice(personIndex, 1)\n  }\n\n  openAddPerson() {\n    this.pm.openAddPM()\n  }\n\n  addPersonToEvent(person: IPerson) {\n    person.state = stateFlag.isAdded\n    this.editableEvent.persons.push(person)\n  }\n\n  eventFieldIsEdited() {\n    if (this.editableEvent.state === stateFlag.isReaded)\n      this.editableEvent.state = stateFlag.isUpdated\n  }\n\n  isPersonNotRemoved(person: IPerson) {\n    return person.state !== stateFlag.isRemoved\n  }\n}\n","<div class=\"modalBackground\" (keydown)=\"onKeyDown($event)\">\n  <div class=\"modalWindow\">\n    <div class=\"modalHeader\">\n      <div class=\"button closeButton\" (click)=\"closeModal()\">X</div>\n      <div *ngIf=\"isAddMode(); else editMode\">\n        <div class=\"title\">Создание нового события</div>\n      </div>\n      <ng-template #editMode>\n        <div *ngIf=\"isEditMode()\">\n          <div class=\"title\">Редактирование события</div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"modalBody\">\n      <form id=\"EMform\">\n        <div class=\"row\">\n          <span class=\"legend\">Категория:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editableEvent.category\"\n            (keydown)=\"eventFieldIsEdited()\"\n            name=\"category\"\n          />\n        </div>\n\n        <div class=\"row\">\n          <span class=\"legend\">Кем задержан:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editableEvent.detention_by\"\n            (keydown)=\"eventFieldIsEdited()\"\n            name=\"detention_by\"\n          />\n        </div>\n\n        <div class=\"row\">\n          <span class=\"legend\">Причина задержания:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editableEvent.detention_reason\"\n            (keydown)=\"eventFieldIsEdited()\"\n            name=\"detention_reason\"\n          />\n        </div>\n\n        <div class=\"row\">\n          <span class=\"legend\">Место хранения:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editableEvent.keeping_place\"\n            (keydown)=\"eventFieldIsEdited()\"\n            name=\"keeping_place\"\n          />\n        </div>\n\n        <div class=\"row\">\n          <span class=\"legend\">Дополнительная информация:</span>\n          <textarea\n            type=\"text\"\n            [(ngModel)]=\"editableEvent.additional\"\n            (keydown)=\"eventFieldIsEdited()\"\n            name=\"additional\"\n          ></textarea>\n        </div>\n        <div *ngIf=\"isAddMode(); else isEditButton\">\n          <button type=\"submit\" (click)=\"onAddEventClicked()\">Add</button>\n        </div>\n        <ng-template #isEditButton>\n          <button type=\"submit\" (click)=\"onEditEventClicked()\">Edit</button>\n        </ng-template>\n      </form>\n      <div class=\"personBrowser\">\n        <div class=\"title\"></div>\n        <div class=\"buttonsLayout\">\n          <div class=\"button\" (click)=\"openAddPerson()\">+</div>\n        </div>\n        <div\n          class=\"body\"\n          *ngFor=\"let person of editableEvent.persons; let personIndex = index\"\n        >\n          <div *ngIf=\"isPersonNotRemoved(person)\">\n            <app-person-browser-card\n              [personData]=\"person\"\n              [personIndex]=\"personIndex\"\n              [removable]=\"true\"\n              (deletePerson)=\"onRemovePerson($event)\"\n            >\n            </app-person-browser-card>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  OnInit,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  AfterViewChecked,\n  ViewChildren,\n  QueryList,\n} from '@angular/core'\nimport { PgQueryService } from '../../services/pg-services/pg-query.service'\nimport { CryptoManagerService } from '../../services/crypto-manager.service'\nimport * as FileSaver from 'file-saver'\nimport { AlertManagerService } from '../../services/window-managers/alert-manager.service'\nimport {\n  EventTableComponent,\n  eventTableStates,\n} from '../../event-table/event-table.component'\nimport { ImportPoolService } from '../../services/import-pool.service'\nimport { Subscription, Observable } from 'rxjs'\n\nexport enum ieManagerStates {\n  importMode,\n  exportMode,\n}\n\n@Component({\n  selector: 'app-import-export-manager',\n  templateUrl: './import-export-manager.component.html',\n  styleUrls: ['./import-export-manager.component.scss'],\n})\nexport class ImportExportManagerComponent\n  implements OnInit, AfterViewInit, AfterViewChecked {\n  element\n  iestate: ieManagerStates\n  isWithPassword: boolean = false\n  poolIsOpened = false\n  encodingPassword: string = ''\n  filetoUpload: File | undefined\n  @ViewChildren('eventTable') eventTableComponent: QueryList<\n    EventTableComponent\n  >\n  @ViewChild('eventTable') eventTable: EventTableComponent\n\n  constructor(\n    private el: ElementRef,\n    public pq: PgQueryService,\n    public cm: CryptoManagerService,\n    public alert: AlertManagerService,\n    public ip: ImportPoolService\n  ) {\n    this.element = el.nativeElement\n  }\n\n  ngAfterViewInit(): void {}\n\n  ngAfterViewChecked() {}\n\n  ngOnInit(): void {\n    this.closeModal()\n  }\n\n  closeModal() {\n    this.poolIsOpened = false\n    this.element.style.display = 'none'\n    this.isWithPassword = false\n    this.encodingPassword = ''\n    this.filetoUpload = undefined\n  }\n\n  isImportMode() {\n    return this.iestate === ieManagerStates.importMode\n  }\n\n  isExportMode() {\n    return this.iestate === ieManagerStates.exportMode\n  }\n\n  isWithPasswordChanged() {\n    this.encodingPassword = ''\n  }\n\n  importObsHandler(obs$: Observable<any>, successMessage: string) {\n    const sub = obs$.subscribe((resp) => {\n      if (resp) {\n        const { data, isSecured } = resp\n        let b = new Blob([data], {\n          type: 'octet/stream',\n        })\n        const currenTime = new Date()\n        const fileName = `${currenTime.getDate()}.${\n          currenTime.getMonth() + 1\n        }.${currenTime.getFullYear()} ${currenTime.getHours()}-${currenTime.getMinutes()}-${currenTime.getSeconds()}`\n        const extension = isSecured ? `.nbds` : `.nbd`\n        this.alert.success('Успешный импорт', successMessage)\n        FileSaver.saveAs(b, fileName + extension)\n        this.closeModal()\n      }\n      sub.unsubscribe()\n    })\n  }\n\n  onImportAllClicked() {\n    const obs$ = this.pq.importEvents({\n      password: this.encodingPassword,\n      onImport: 'ALL',\n    })\n    this.importObsHandler(\n      obs$,\n      'Все данные из базы портированы в файл успешно.'\n    )\n  }\n\n  onImportFromPoolClicked() {\n    const obs$ = this.pq.importEvents({\n      password: this.encodingPassword,\n      onImport: this.ip.getPool().map((event) => event.id),\n    })\n    this.importObsHandler(\n      obs$,\n      'Все данные из пула портированы в файл успешно.'\n    )\n  }\n\n  handleFileInput(files: FileList) {\n    this.filetoUpload = files[0]\n    this.encodingPassword = ''\n  }\n\n  isSecuredFile() {\n    if (!!this.filetoUpload) {\n      let fileNameArray = this.filetoUpload.name.split('.')\n      const extension = fileNameArray[fileNameArray.length - 1]\n      return extension === 'nbds'\n    } else return false\n  }\n\n  isFileUploaded() {\n    return !!this.filetoUpload\n  }\n\n  onExportFileClicked() {\n    let fileReader = new FileReader()\n    fileReader.readAsText(this.filetoUpload)\n    fileReader.onload = (e) => {\n      let textFromFile: string = String(fileReader.result)\n      let array: number[] = textFromFile\n        .split(',')\n        .map((val: string | number) => (val = +val))\n      if (this.isSecuredFile()) {\n        if (this.cm.isPasswordRight(array, undefined, this.encodingPassword)) {\n          this.alert.success(\n            'Верный пароль',\n            'Пароль введен верно. Система приступает к экспорту.'\n          )\n          this.pq\n            .exportEvents({ data: array, password: this.encodingPassword })\n            .subscribe((res) => {\n              this.closeModal()\n              this.alert.success(\n                'Успешный экспорт',\n                'Данные экспортированы успешно.'\n              )\n              window.location.reload()\n            })\n        } else {\n          this.alert.error('Неверный пароль', 'Вы ввели неверный пароль')\n          console.log('пароль не верный')\n        }\n      } else {\n        this.pq\n          .exportEvents({ data: array, password: this.cm.getDefaultPassword() })\n          .subscribe((res) => {\n            this.closeModal()\n            this.alert.success(\n              'Успешный экспорт',\n              'Данные экспортированы успешно.'\n            )\n            window.location.reload()\n          })\n      }\n    }\n  }\n\n  fillEventTable() {\n    this.eventTableComponent.changes.subscribe(\n      (comp: QueryList<EventTableComponent>) => {\n        if (comp.first) {\n          comp.first.setTableState(eventTableStates.importPage)\n          comp.first.setEventTable(this.ip.getPool())\n        }\n      }\n    )\n  }\n\n  handlePoolVisibility(isOpen: boolean) {\n    this.poolIsOpened = !this.poolIsOpened\n    if (isOpen)\n      setTimeout(() => {\n        this.eventTable.setTableState(eventTableStates.importPage)\n        this.eventTable.setEventTable(this.ip.getPool())\n      }, 0)\n  }\n}\n","<div class=\"modalBackground\">\n  <div class=\"modalWindow\">\n    <div class=\"modalHeader\">\n      <div class=\"button closeButton\" (click)=\"closeModal()\">X</div>\n    </div>\n    <div class=\"modalBody\">\n      <div class=\"importContent\" *ngIf=\"isImportMode()\">\n        <div class=\"passwordBlock\">\n          <div class=\"checkboxBlock\">\n            <input\n              type=\"checkbox\"\n              [(ngModel)]=\"isWithPassword\"\n              id=\"isWithPasswordInput\"\n              (change)=\"isWithPasswordChanged()\"\n            />\n            <label for=\"isWithPasswordInput\">Использовать пароль?</label>\n          </div>\n          <input\n            type=\"password\"\n            size=\"16\"\n            [(ngModel)]=\"encodingPassword\"\n            *ngIf=\"isWithPassword\"\n          />\n        </div>\n        <div class=\"button\" *ngIf=\"!poolIsOpened\" (click)=\"handlePoolVisibility(true)\">\n          Открыть пул импорта ({{ ip.pool.length }})\n        </div>\n        <div class=\"button\" *ngIf=\"poolIsOpened\" (click)=\"handlePoolVisibility(false)\">\n          Закрыть пул\n        </div>\n        <app-event-table\n        *ngIf=\"poolIsOpened\"\n        id=\"eventTable\"\n        #eventTable>\n        </app-event-table>\n\n        <div class=\"buttonsBlock\">\n          <div class=\"button\" (click)=\"onImportAllClicked()\">\n            Импорт всех записных книг\n          </div>\n          <div class=\"button\" (click)=\"onImportFromPoolClicked()\">\n            Импорт из пула\n          </div>\n        </div>\n      </div>\n\n      <div class=\"exportContent\" *ngIf=\"isExportMode()\">\n        <div class=\"inputFileBlock\">\n          <label for=\"file\">Выберите файл</label>\n          <input\n            type=\"file\"\n            id=\"file\"\n            accept=\".nbd, .nbds\"\n            (change)=\"handleFileInput($event.target.files)\"\n          />\n        </div>\n\n        <div class=\"isSecuredFileBlock\" *ngIf=\"isSecuredFile()\">\n          <label for=\"passwordExport\">Данный файл защищен паролем</label>\n          <input\n            type=\"password\"\n            id=\"passwordExport\"\n            [(ngModel)]=\"encodingPassword\"\n          />\n        </div>\n        <div\n          class=\"button\"\n          *ngIf=\"isFileUploaded()\"\n          (click)=\"onExportFileClicked()\"\n        >\n          Загрузить файл\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  OnInit,\n  ElementRef,\n  EventEmitter,\n  Output,\n} from '@angular/core'\nimport { IPerson, emptyPerson } from '../../dto/person.dto'\nimport { ITelephone, emptyTelephone } from '../../dto/telephone.dto'\nimport { PgQueryService } from '../../services/pg-services/pg-query.service'\nimport { IContact, emptyContact } from '../../dto/contact.dto'\nimport { FormGroup, FormControl } from '@angular/forms'\nimport { stateFlag } from '../../dto/flag.dto'\nimport { CryptoManagerService } from '../../services/crypto-manager.service'\n\nexport enum personManagerStates {\n  editMode,\n  addMode,\n}\n\n@Component({\n  selector: 'app-person-manager',\n  templateUrl: './person-manager.component.html',\n  styleUrls: ['./person-manager.component.scss'],\n})\nexport class PersonManagerComponent implements OnInit {\n  element\n  public pmState: personManagerStates\n  editablePerson: IPerson = { ...emptyPerson, telephones: [] }\n\n  clickedTelephone: ITelephone = { ...emptyTelephone, contacts: [] }\n  clickedContact: IContact = { ...emptyContact }\n\n  isTelephoneClicked: boolean = false\n  isContactClicked: boolean = false\n\n  @Output() personIsAdded: EventEmitter<IPerson> = new EventEmitter<IPerson>()\n\n  addContactForm = new FormGroup({\n    telephone: new FormControl(''),\n    alias: new FormControl(''),\n  })\n\n  addTelephoneForm = new FormGroup({\n    telephone: new FormControl(''),\n  })\n\n  constructor(\n    private el: ElementRef,\n    public pq: PgQueryService,\n    public cm: CryptoManagerService\n  ) {\n    this.element = el.nativeElement\n  }\n\n  ngOnInit(): void {\n    // Initial state\n    this.closeModal()\n  }\n\n  closeModal() {\n    this.element.style.display = 'none'\n    this.clickedTelephone = { ...emptyTelephone, contacts: [] }\n    this.clickedContact = emptyContact\n    this.editablePerson = { ...emptyPerson, telephones: [] }\n    this.isTelephoneClicked = false\n    this.isContactClicked = false\n  }\n\n  isEditMode() {\n    return this.pmState === personManagerStates.editMode\n  }\n\n  isAddMode() {\n    return this.pmState === personManagerStates.addMode\n  }\n\n  onTelephoneTableClicked(telephone: ITelephone, index: number) {\n    this.clickedTelephone = telephone\n    this.telephoneTablePainter(index)\n    console.log(this.clickedTelephone)\n  }\n\n  onContactTableClicked(contact: IContact, index: number) {\n    this.contactTablePainter(index)\n    this.clickedContact = contact\n  }\n\n  telephoneTablePainter(index: number) {\n    Array.from(document.getElementsByClassName(`selectedTelephoneRow`)).map(\n      ($el) => {\n        $el.className = $el.className.substring(\n          0,\n          $el.className.indexOf('selectedTelephoneRow') - 1\n        )\n      }\n    )\n\n    const $telephoneRow = document.getElementsByClassName(\n      `telephone${index}`\n    )[0]\n    if (!!$telephoneRow) {\n      $telephoneRow.className += ' selectedTelephoneRow'\n      this.isTelephoneClicked = true\n      this.isContactClicked = false\n    }\n  }\n\n  contactTablePainter(index: number) {\n    Array.from(document.getElementsByClassName(`selectedContactRow`)).map(\n      ($el) => {\n        $el.className = $el.className.substring(\n          0,\n          $el.className.indexOf('selectedContactRow') - 1\n        )\n      }\n    )\n\n    const $contactRow = document.getElementsByClassName(`contact${index}`)[0]\n    if (!!$contactRow) {\n      $contactRow.className += ' selectedContactRow'\n      this.isContactClicked = true\n    }\n  }\n\n  onTelephoneInput(e: KeyboardEvent) {\n    if (e.key === `Enter` || e.key === `Escape`) {\n      const $input: HTMLInputElement = <HTMLInputElement>e.target\n      if (e.key === `Escape`) {\n        $input.value = ''\n      } else if (e.key === `Enter`) {\n        this.addTelephoneClicked()\n      }\n    } else return\n  }\n\n  addTelephoneClicked() {\n    if (!!this.addTelephoneForm.value.telephone) {\n      this.editablePerson.telephones.push({\n        contacts: [],\n        id: null,\n        internum: false,\n        number: this.addTelephoneForm.value.telephone,\n        oldnum: false,\n        person_id: this.editablePerson.id,\n        state: stateFlag.isAdded,\n      })\n      this.addTelephoneForm.reset()\n    }\n  }\n\n  onContactInput() {\n    if (\n      !!this.addContactForm.value.telephone.trim() &&\n      !!this.addContactForm.value.alias.trim()\n    ) {\n      this.clickedTelephone.contacts.push({\n        alias: this.addContactForm.value.alias,\n        id: null,\n        internum: false,\n        oldnum: false,\n        telephone_id: this.clickedTelephone.id,\n        number: this.addContactForm.value.telephone,\n        state: stateFlag.isAdded,\n      })\n      this.addContactForm.reset()\n    }\n  }\n\n  onEditButtonClicked() {\n    const sub = this.pq\n      .setUpdatePerson(this.editablePerson)\n      .subscribe((res: any) => {\n        if (res) {\n          res = this.cm.decode(res)\n          sub.unsubscribe()\n          document.location.reload()\n        }\n      })\n  }\n\n  onAddButtonClicked() {\n    this.personIsAdded.emit(this.editablePerson)\n    this.closeModal()\n  }\n\n  onTelephoneChanged(e: InputEvent, telephone: ITelephone) {\n    const newTelephone = (<HTMLDivElement>e.target).innerText\n    if (telephone.number !== newTelephone) {\n      telephone.number = newTelephone\n      if (telephone.state === stateFlag.isReaded)\n        telephone.state = stateFlag.isUpdated\n    }\n  }\n\n  onContactNumberChanged(e: InputEvent, contact: IContact) {\n    const newTelephone = (<HTMLDivElement>e.target).innerText\n    if (newTelephone !== contact.number) {\n      contact.number = newTelephone\n      if (contact.state === stateFlag.isReaded)\n        contact.state = stateFlag.isUpdated\n    }\n  }\n\n  onContactAliasChanged(e: InputEvent, contact: IContact) {\n    const newAlias = (<HTMLDivElement>e.target).innerText\n    if (contact.alias !== newAlias) {\n      contact.alias = newAlias\n      if (contact.state === stateFlag.isReaded)\n        contact.state = stateFlag.isUpdated\n    }\n  }\n\n  personFieldIsEdited() {\n    if (this.editablePerson.state === stateFlag.isReaded)\n      this.editablePerson.state = stateFlag.isUpdated\n  }\n\n  isNotRemoved(obj: ITelephone | IContact) {\n    return obj.state !== stateFlag.isRemoved\n  }\n\n  onContactRemoveClicked() {\n    this.isContactClicked = false\n    if (this.clickedContact.state === stateFlag.isReaded)\n      this.clickedContact.state = stateFlag.isRemoved\n    else if (\n      this.clickedContact.state === stateFlag.isAdded ||\n      this.clickedContact.state === stateFlag.isUpdated\n    ) {\n      this.clickedTelephone.contacts.splice(\n        this.clickedTelephone.contacts.indexOf(this.clickedContact),\n        1\n      )\n    }\n    this.clickedContact = emptyContact\n  }\n\n  onTelephoneRemoveClicked() {\n    this.isTelephoneClicked = false\n    if (this.clickedTelephone.state === stateFlag.isReaded)\n      this.clickedTelephone.state = stateFlag.isRemoved\n    else if (\n      this.clickedTelephone.state === stateFlag.isAdded ||\n      this.clickedTelephone.state === stateFlag.isUpdated\n    ) {\n      this.editablePerson.telephones.splice(\n        this.editablePerson.telephones.indexOf(this.clickedTelephone),\n        1\n      )\n    }\n    this.clickedTelephone = { ...emptyTelephone, contacts: [] }\n  }\n}\n","<div class=\"modalBackground personModalBackground\">\n  <div class=\"modalWindow personModalWindow\">\n    <div class=\"modalHeader personModalHeader\">\n      <div class=\"button closeButton personCloseButton\" (click)=\"closeModal()\">\n        X\n      </div>\n      <div *ngIf=\"isAddMode(); else editMode\">\n        <div class=\"title\">Создание нового фигуранта</div>\n      </div>\n      <ng-template #editMode>\n        <div class=\"title\">Редактирование выбранного фиугранта</div>\n      </ng-template>\n    </div>\n    <div class=\"modalBody personModalBody\">\n      <form>\n        <div class=\"row\">\n          <span class=\"legend\">Фамилия:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editablePerson.lastname\"\n            (keydown)=\"personFieldIsEdited()\"\n            name=\"lastname\"\n          />\n        </div>\n        <div class=\"row\">\n          <span class=\"legend\">Имя:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editablePerson.name\"\n            (keydown)=\"personFieldIsEdited()\"\n            name=\"name\"\n          />\n        </div>\n        <div class=\"row\">\n          <span class=\"legend\">Отчество:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editablePerson.midname\"\n            (keydown)=\"personFieldIsEdited()\"\n            name=\"midname\"\n          />\n        </div>\n        <div class=\"row\">\n          <span class=\"legend\">Кличка:</span>\n          <input\n            type=\"text\"\n            [(ngModel)]=\"editablePerson.alias\"\n            (keydown)=\"personFieldIsEdited()\"\n            name=\"alias\"\n          />\n        </div>\n      </form>\n      <div class=\"tablesContainer\">\n        <div class=\"telephonesTable\">\n          <div class=\"title\">\n            Telephones\n            <div\n              class=\"button\"\n              *ngIf=\"isTelephoneClicked\"\n              (click)=\"onTelephoneRemoveClicked()\"\n            >\n              Remove\n            </div>\n          </div>\n          <div class=\"body\">\n            <div\n              *ngFor=\"\n                let telephone of editablePerson.telephones;\n                let telephoneIndex = index\n              \"\n            >\n              <div *ngIf=\"isNotRemoved(telephone)\">\n                <div\n                  [class]=\"\n                    'row telephoneRow telephone' +\n                    telephoneIndex +\n                    ' state' +\n                    telephone.state\n                  \"\n                  (click)=\"onTelephoneTableClicked(telephone, telephoneIndex)\"\n                >\n                  <div class=\"phoneIcon\">\n                    <img src=\"../../../assets/svgIcons/phone.svg\" />\n                  </div>\n                  <div\n                    class=\"telephoneNumber\"\n                    contenteditable=\"true\"\n                    (blur)=\"onTelephoneChanged($event, telephone)\"\n                  >\n                    {{ telephone.number }}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <form\n              class=\"telephonesTableInputLayout\"\n              [formGroup]=\"addTelephoneForm\"\n            >\n              <input\n                class=\"telephoneInput\"\n                type=\"text\"\n                formControlName=\"telephone\"\n                (keydown)=\"onTelephoneInput($event)\"\n              />\n              <div class=\"button\" (click)=\"addTelephoneClicked()\">Добавить</div>\n            </form>\n          </div>\n        </div>\n        <div class=\"contactsTable\">\n          <div class=\"title\">\n            Contacts\n            <div *ngIf=\"isContactClicked\" class=\"buttonLayout\">\n              <div class=\"button\" (click)=\"onContactRemoveClicked()\">\n                Remove\n              </div>\n            </div>\n          </div>\n          <div class=\"body\">\n            <div\n              *ngFor=\"\n                let contact of clickedTelephone.contacts;\n                let contactIndex = index\n              \"\n            >\n              <div *ngIf=\"isNotRemoved(contact)\">\n                <div\n                  [class]=\"\n                    'row contactRow contact' +\n                    contactIndex +\n                    ' state' +\n                    contact.state\n                  \"\n                  (click)=\"onContactTableClicked(contact, contactIndex)\"\n                >\n                  <div class=\"contactIcon\">\n                    <img src=\"../../../assets/svgIcons/contact.svg\" />\n                  </div>\n                  <div\n                    class=\"contactNumber\"\n                    contenteditable=\"true\"\n                    (blur)=\"onContactNumberChanged($event, contact)\"\n                  >\n                    {{ contact.number }}\n                  </div>\n                  <div\n                    class=\"contactAlias\"\n                    contenteditable=\"true\"\n                    (blur)=\"onContactAliasChanged($event, contact)\"\n                  >\n                    {{ contact.alias }}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div *ngIf=\"isTelephoneClicked\">\n              <form\n                [formGroup]=\"addContactForm\"\n                (ngSubmit)=\"onContactInput($event)\"\n              >\n                <input type=\"text\" formControlName=\"telephone\" />\n                <input type=\"text\" formControlName=\"alias\" />\n                <button type=\"submit\">Add</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"isAddMode()\">\n        <div class=\"button personSubmitButton\" (click)=\"onAddButtonClicked()\">\n          Add\n        </div>\n      </div>\n      <div *ngIf=\"isEditMode()\">\n        <div class=\"button personSubmitButton\" (click)=\"onEditButtonClicked()\">\n          Edit\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n} from '@angular/core'\nimport { emptyContact, IContact } from '../../dto/contact.dto'\nimport { emptyEvent, IEvent } from '../../dto/event.dto'\nimport { emptyPerson, IPerson } from '../../dto/person.dto'\nimport { emptyTelephone, ITelephone } from '../../dto/telephone.dto'\nimport { SearchManagerService } from '../../services/window-managers/search-manager.service'\nimport {\n  EventTableComponent,\n  eventTableStates,\n} from '../../event-table/event-table.component'\nimport { stateFlag } from '../../dto/flag.dto'\nimport { CryptoManagerService } from '../../services/crypto-manager.service'\nimport { ImportPoolService } from '../../services/import-pool.service'\nimport { EventTableService } from '../../services/event-table.service'\n\n@Component({\n  selector: 'app-search-manager',\n  templateUrl: './search-manager.component.html',\n  styleUrls: ['./search-manager.component.scss'],\n})\nexport class SearchManagerComponent implements OnInit, AfterViewInit {\n  element: any\n  eventForSearch: IEvent = { ...emptyEvent, persons: [] }\n  @ViewChild('eventTable') eventTableComponent: EventTableComponent\n  rowIsSelected: boolean = false\n  tableIsEmpty: boolean = true\n\n  constructor(\n    private el: ElementRef,\n    private sm: SearchManagerService,\n    private cm: CryptoManagerService,\n    public ip: ImportPoolService,\n    public et: EventTableService\n  ) {\n    this.element = this.el.nativeElement\n    this.closeModal()\n  }\n  ngAfterViewInit(): void {\n    this.eventTableComponent.setTableState(eventTableStates.searchPage)\n    this.et.setSearchPageComponent(this.eventTableComponent)\n  }\n\n  ngOnInit(): void {}\n\n  closeModal() {\n    this.clearEvent()\n    this.element.style.display = 'none'\n  }\n\n  clearEvent() {\n    this.rowIsSelected = false\n    let contact: IContact = { ...emptyContact }\n    let telephone: ITelephone = { ...emptyTelephone, contacts: [] }\n    let person: IPerson = { ...emptyPerson, telephones: [] }\n    this.eventForSearch = { ...emptyEvent, persons: [] }\n\n    telephone.contacts.push(contact)\n    person.telephones.push(telephone)\n    this.eventForSearch.persons.push(person)\n    if (this.eventTableComponent) {\n      this.eventTableComponent.setEventTable([])\n      this.eventTableComponent.setEmptySearchFlag(false)\n    }\n  }\n\n  onSearchClicked() {\n    const sub = this.sm.searchInBase(this.eventForSearch).subscribe((res) => {\n      let events: IEvent[] = this.cm.decode(res).rows\n      console.log(events)\n      if (events['type'] === 'empty') {\n        sub.unsubscribe()\n        this.eventTableComponent.setEventTable([])\n        return this.eventTableComponent.setEmptySearchFlag(true)\n      } else {\n        events = events.map((ev) => {\n          ev['persons'] = []\n          ev['state'] = stateFlag.isReaded\n          return ev\n        })\n        this.et.clearComparsion()\n        this.eventTableComponent.setEventTable(events)\n        this.et.getComparsion()\n        sub.unsubscribe()\n      }\n    })\n  }\n\n  eventTableRowSelected(state: boolean) {\n    this.rowIsSelected = state\n  }\n\n  eventTableIsEmpty(state: boolean) {\n    this.tableIsEmpty = state\n  }\n\n  addToPoolAll() {\n    this.ip.addToPool(this.eventTableComponent.eventTable, true)\n  }\n\n  addToPoolSelected() {\n    this.ip.addToPool([this.eventTableComponent.selectedEvent], true)\n  }\n}\n","<div class=\"modalBackground\">\n  <div class=\"modalWindow\">\n    <div class=\"modalHeader\">\n      <div class=\"button closeButton\" (click)=\"closeModal()\">X</div>\n    </div>\n    <div class=\"modalBody\">\n      <div class=\"column1\">\n        <h3>Event</h3>\n        <label for=\"evCategory\">Category</label>\n        <input\n          type=\"text\"\n          id=\"evCategory\"\n          [(ngModel)]=\"eventForSearch.category\"\n        />\n\n        <label for=\"evDetentionBy\">Detention by</label>\n        <input\n          type=\"text\"\n          id=\"evDetentionBy\"\n          [(ngModel)]=\"eventForSearch.detention_by\"\n        />\n\n        <label for=\"evDetentionDate\">Detention date</label>\n        <input\n          type=\"text\"\n          id=\"evDetentionDate\"\n          [(ngModel)]=\"eventForSearch.detention_date\"\n        />\n\n        <label for=\"evDetentionReason\">Detention reason</label>\n        <input\n          type=\"text\"\n          id=\"evDetentionReason\"\n          [(ngModel)]=\"eventForSearch.detention_reason\"\n        />\n\n        <label for=\"evKeepingPlace\">Keeping place</label>\n        <input\n          type=\"text\"\n          id=\"evKeepingPlace\"\n          [(ngModel)]=\"eventForSearch.keeping_place\"\n        />\n\n        <label for=\"evAdditional\">Additional</label>\n        <input\n          type=\"text\"\n          id=\"evAdditional\"\n          [(ngModel)]=\"eventForSearch.additional\"\n        />\n        <h3>Person</h3>\n        <label for=\"persName\">Name</label>\n        <input\n          type=\"text\"\n          id=\"persName\"\n          [(ngModel)]=\"eventForSearch.persons[0].name\"\n        />\n        <label for=\"persLastname\">Lastname</label>\n        <input\n          type=\"text\"\n          id=\"persLastname\"\n          [(ngModel)]=\"eventForSearch.persons[0].lastname\"\n        />\n        <label for=\"persMidname\">Midname</label>\n        <input\n          type=\"text\"\n          id=\"persMidname\"\n          [(ngModel)]=\"eventForSearch.persons[0].midname\"\n        />\n        <label for=\"persAlias\">Alias</label>\n        <input\n          type=\"text\"\n          id=\"persAlias\"\n          [(ngModel)]=\"eventForSearch.persons[0].alias\"\n        />\n        <h3>Telephone</h3>\n        <label for=\"telNumber\">Number</label>\n        <input\n          type=\"text\"\n          id=\"telNumber\"\n          [(ngModel)]=\"eventForSearch.persons[0].telephones[0].number\"\n        />\n        <h3>Contact</h3>\n        <label for=\"contNumber\">Number</label>\n        <input\n          type=\"text\"\n          id=\"contNumber\"\n          [(ngModel)]=\"\n            eventForSearch.persons[0].telephones[0].contacts[0].number\n          \"\n        />\n        <label for=\"contAlias\">Alias</label>\n        <input\n          type=\"text\"\n          id=\"contAlias\"\n          [(ngModel)]=\"\n            eventForSearch.persons[0].telephones[0].contacts[0].alias\n          \"\n        />\n        <div class=\"button\" (click)=\"onSearchClicked()\">Поиск</div>\n      </div>\n      <div class=\"column2\">\n        <h2>Результаты поиска</h2>\n        <app-event-table\n          #eventTable\n          (eventIsSelected)=\"eventTableRowSelected($event)\"\n          (eventTableIsEmpty)=\"eventTableIsEmpty($event)\"\n        >\n        </app-event-table>\n        <div class=\"buttonsBlock\" *ngIf=\"!tableIsEmpty\">\n          <div class=\"button\" (click)=\"addToPoolAll()\">\n            Добавить результаты поиска в пул импорта\n          </div>\n          <div\n            class=\"button\"\n            *ngIf=\"rowIsSelected\"\n            (click)=\"addToPoolSelected()\"\n          >\n            Добавить в ЗК №{{ eventTableComponent.selectedEvent.id }} в пул\n            импорта\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core'\nimport { Route, RouterModule, Routes } from '@angular/router'\nimport { LoginComponent } from '../../login/login.component'\nimport { MainPageComponent } from '../../main-page/main-page.component'\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'main', component: MainPageComponent },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class RoutingModule {}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  Output,\n  EventEmitter,\n} from '@angular/core'\nimport { EventManagerComponent } from '../modalWindows/event-manager/event-manager.component'\nimport { EventTableService } from '../services/event-table.service'\nimport { ImportExportService } from '../services/window-managers/import-export.service'\n\n@Component({\n  selector: 'app-options-bar',\n  templateUrl: './options-bar.component.html',\n  styleUrls: ['./options-bar.component.scss'],\n})\nexport class OptionsBarComponent implements OnInit {\n  @Output() ondAddEvent: EventEmitter<any> = new EventEmitter<any>()\n  @Output() onImport: EventEmitter<any> = new EventEmitter<any>()\n  @Output() onExport: EventEmitter<any> = new EventEmitter<any>()\n  @Output() onSearch: EventEmitter<any> = new EventEmitter<any>()\n\n  constructor(public et: EventTableService, public ie: ImportExportService) {}\n\n  ngOnInit(): void {}\n\n  onAddEventClicked() {\n    this.ondAddEvent.emit()\n  }\n\n  isEventSelected() {\n    return !!this.et.getSelectedEvent()\n  }\n\n  onRemoveEventClicked() {\n    const sub = this.et.onRemoveClicked().subscribe((res) => {\n      window.location.reload()\n      sub.unsubscribe()\n    })\n  }\n\n  onImportClicked() {\n    this.onImport.emit()\n  }\n\n  onExportClicked() {\n    this.onExport.emit()\n  }\n\n  onSearchClicked() {\n    this.onSearch.emit()\n  }\n}\n","<div class=\"optionsBar\">\n  <div class=\"button\" (click)=\"onAddEventClicked()\">Добавить ЗК</div>\n  <div class=\"button\" (click)=\"onSearchClicked()\">Поиск</div>\n  <div\n    class=\"button\"\n    *ngIf=\"isEventSelected()\"\n    (click)=\"onRemoveEventClicked()\"\n  >\n    Удалить ЗК\n  </div>\n  <div class=\"button\" (click)=\"onImportClicked()\">Импорт</div>\n  <div class=\"button\" (click)=\"onExportClicked()\">Экспорт</div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { IPerson } from '../dto/person.dto'\nimport { PersonManagerService } from '../services/window-managers/person-manager.service'\n@Component({\n  selector: 'app-person-browser-card',\n  templateUrl: './person-browser-card.component.html',\n  styleUrls: ['./person-browser-card.component.scss'],\n})\nexport class PersonBrowserCardComponent implements OnInit {\n  @Input() personData: IPerson\n  @Input() personIndex: number\n  @Input() removable: boolean = false\n  @Output() deletePerson: EventEmitter<number> = new EventEmitter<number>()\n\n  constructor(private pm: PersonManagerService) {}\n\n  ngOnInit(): void {}\n\n  removePerson() {\n    this.deletePerson.emit(this.personIndex)\n  }\n\n  openEditPM(person: IPerson) {\n    this.pm.openEditPM(person)\n  }\n}\n","<div class=\"card\">\n  <span *ngIf=\"removable\">\n    <div class=\"button removeButton\" (click)=\"removePerson()\">Удалить</div>\n  </span>\n  <div class=\"cardBody\">\n    <img src=\"../../../assets/svgIcons/person.svg\" />\n    <div class=\"personInfo\">\n      {{ personData.lastname }} {{ personData.name }} {{ personData.midname }}\n    </div>\n\n    <div class=\"personAlias\">&laquo;{{ personData.alias }}&raquo;</div>\n    <div class=\"footer\">\n      <div class=\"button\" (click)=\"openEditPM(personData)\">Редактировать</div>\n      <div class=\"button\">Просмотреть</div>\n    </div>\n  </div>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'jsonKeys',\n})\nexport class JsonKeysPipe implements PipeTransform {\n  transform(value: any): any[] {\n    return Object.keys(value)\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'jsonValues',\n})\nexport class JsonValuesPipe implements PipeTransform {\n  transform(value: any): any[] {\n    return Object.values(value)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { Observable, interval, Subscription } from 'rxjs'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { statusCode } from '../dto/crypto.dto'\n\nimport * as aesjs from 'aes-js'\nimport { backendUrl } from '../../backend.conf'\nimport { catchError, share } from 'rxjs/operators'\n\nimport { CookieService } from 'ngx-cookie-service'\n\nconst httpOptions = new HttpHeaders()\n@Injectable({\n  providedIn: 'root',\n})\nexport class CryptoManagerService {\n  aes // AES crypto\n  private defaultPassword = 'eab88efa463a5820'\n  // updatingTime: number = 10000 //600000 //10 minutes\n  // cryptoService$: Observable<number> = interval(this.updatingTime)\n  cryptoServiceSub: Subscription\n\n  constructor(private http: HttpClient, private cs: CookieService) {\n    console.log(this.cryptoServiceSub)\n    if (!!!this.aes)\n      if (this.cs.check('hash')) {\n        this.aes = new aesjs.AES(\n          this.passwordToArrayHandler(this.cs.get('hash'))\n        )\n        // if (!!!this.cryptoServiceSub)\n        //   this.cryptoServiceSub = this.cryptoService$.subscribe((_) =>\n        //     this.updateKey()\n        //   )\n      }\n  }\n\n  upService(uuid: string) {\n    this.setKey(uuid)\n    // if (!!!this.cryptoServiceSub)\n    //   this.cryptoServiceSub = this.cryptoService$.subscribe((_) =>\n    //     this.updateKey()\n    //   )\n  }\n\n  updateKey() {\n    const sub = this.http\n      .post<any>(\n        `${backendUrl}/crypto_service`,\n        { code: statusCode.updateKey },\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(\n        catchError(async (err) => console.log(err)),\n        share()\n      )\n      .subscribe((res) => {\n        console.log(res)\n        if (res) this.setKey(res.resolved.uuid)\n\n        sub.unsubscribe()\n      })\n  }\n\n  setKey(uuid: string) {\n    const slicedKey = uuid.slice(3, 8) + uuid.slice(24, -1)\n    this.aes = new aesjs.AES(this.passwordToArrayHandler(slicedKey)) //Have setted key to encoder\n    this.cs.set('hash', slicedKey)\n\n    const sub = this.http\n      .post<any>(\n        `${backendUrl}/crypto_service`,\n        { code: statusCode.keyIsUpdated },\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n      .subscribe((res) => {\n        sub.unsubscribe()\n      })\n  }\n\n  encode(data: any, password = undefined): Uint8Array[] {\n    const data_string = JSON.stringify(data)\n    let data_array = Array.from(aesjs.utils.utf8.toBytes(data_string))\n\n    data_array = this.arraySizeHandler(data_array)\n    let encoding_Result = []\n    for (let i = 1; i <= data_array.length / 16; i++) {\n      const batch = data_array.slice((i - 1) * 16, i * 16)\n      const encryptedBytes = this.aes.encrypt(batch)\n      encoding_Result = encoding_Result.concat([...encryptedBytes])\n    }\n    return encoding_Result\n  }\n\n  decode(data, password = undefined) {\n    data = this.arraySizeHandler(data)\n\n    if (this.isPasswordRight(data, this.aes)) {\n      let decodingResult = []\n      for (let i = 1; i <= data.length / 16; i++) {\n        const batch = data.slice((i - 1) * 16, i * 16)\n        const encryptedBytes = this.aes.decrypt(batch)\n        decodingResult = decodingResult.concat([...encryptedBytes])\n      }\n      let strResult = aesjs.utils.utf8\n        .fromBytes(decodingResult)\n        .replace(/\\0/g, '')\n      let res = JSON.parse(strResult)\n      return res\n    } else return 'Error: Password is wrong'\n  }\n\n  isPasswordRight = (data, aes = undefined, password = undefined) => {\n    const batch = data.slice(0, 16)\n    let encryptedBytes\n\n    if (!!aes) {\n      encryptedBytes = aes.decrypt(batch)\n    } else if (!!password) {\n      let localAes = new aesjs.AES(this.passwordToArrayHandler(password))\n      encryptedBytes = localAes.decrypt(batch)\n    }\n\n    if (\n      encryptedBytes[0] !== 123 && // char {\n      encryptedBytes[0] !== 91 // char [\n    ) {\n      return false\n    }\n    return true\n  }\n\n  private arraySizeHandler = (data_array) => {\n    if (data_array.length % 16 !== 0) {\n      const lengthOfZeros =\n        (~~(data_array.length / 16) + 1) * 16 - data_array.length\n      const additionalArray = new Array(lengthOfZeros).fill(0)\n      data_array = data_array.concat([...additionalArray])\n    }\n    return data_array\n  }\n\n  private passwordToArrayHandler = (password) => {\n    const encoder: TextEncoder = new TextEncoder()\n    const password_array = new Uint8Array(16)\n    encoder.encodeInto(password, password_array)\n    return password_array\n  }\n\n  getDefaultPassword() {\n    return this.defaultPassword\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { IEvent } from '../dto/event.dto'\nimport { PgQueryService } from './pg-services/pg-query.service'\nimport { EventTableComponent } from '../event-table/event-table.component'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventTableService {\n  private selectedEvent: IEvent\n  private mainPageComponent: EventTableComponent\n  private searchPageComponent: EventTableComponent\n  private comparsionTable: { searchTable: number; mainTable: number }[]\n\n  constructor(public pq: PgQueryService) {}\n\n  onRemoveClicked() {\n    return this.pq.setRemoveEvent(this.selectedEvent)\n  }\n\n  setSelectedEvent(event: IEvent) {\n    this.selectedEvent = event\n  }\n\n  getSelectedEvent() {\n    return this.selectedEvent\n  }\n\n  setMainPageComponent(component: EventTableComponent) {\n    this.mainPageComponent = component\n  }\n\n  setSearchPageComponent(component: EventTableComponent) {\n    this.searchPageComponent = component\n  }\n\n  changeHighlightMainEventTable(events: IEvent[]) {\n    events.forEach((event) => {\n      if (!!this.mainPageComponent)\n        this.mainPageComponent.importTablePainter(event)\n      if (!!this.searchPageComponent)\n        this.searchPageComponent.importTablePainter(event)\n    })\n  }\n\n  getComparsion() {\n    let mainTable: IEvent[] = this.mainPageComponent.eventTable\n    let searchTable: IEvent[] = this.searchPageComponent.eventTable\n\n    searchTable.forEach((sE, index) => {\n      this.comparsionTable.push({\n        mainTable: mainTable.findIndex((mE) => mE.id === sE.id),\n        searchTable: index,\n      })\n    })\n  }\n\n  clearComparsion() {\n    this.comparsionTable = []\n  }\n\n  changeStateByComparsion(events: IEvent[]) {\n    events.forEach((event, index) => {\n      const actualState = event.importPoolState\n      const mainTableIndex = this.comparsionTable[index].mainTable\n      this.mainPageComponent.eventTable[\n        mainTableIndex\n      ].importPoolState = actualState\n    })\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { ImportPoolComponent } from '../import-pool/import-pool.component'\nimport { IEvent } from '../dto/event.dto'\nimport { AlertManagerService } from './window-managers/alert-manager.service'\nimport { EventTableService } from './event-table.service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImportPoolService {\n  component: ImportPoolComponent\n  private pool: IEvent[] = []\n  constructor(\n    public alert: AlertManagerService,\n    public em: EventTableService\n  ) {}\n\n  addToPool(events: IEvent[], isFromSearch: boolean = false) {\n    events = events.filter(\n      (event) => !this.pool.some((poolEvent) => poolEvent.id === event.id)\n    )\n    if (events.length > 0) {\n      events.forEach((event) => (event.importPoolState = true))\n      this.em.changeHighlightMainEventTable(events)\n\n      if (isFromSearch) this.em.changeStateByComparsion(events)\n\n      this.pool = this.pool.concat(...events)\n      this.alert.success(\n        'Успех',\n        `В пул импорта успешно добавлены ${events.length} ЗК`\n      )\n    } else\n      this.alert.warning(\n        'Внимание',\n        `Выбранные записные книги уже находятся в пуле импорта`\n      )\n  }\n\n  removeFromPool(event: IEvent) {\n    const index = this.pool.findIndex((ev) => ev.id === event.id)\n    this.pool[index].importPoolState = false\n    this.pool.splice(index, 1)\n    this.em.changeHighlightMainEventTable([event])\n  }\n\n  getPool() : IEvent[] {\n    return this.pool\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { catchError } from 'rxjs/operators'\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http'\nimport { Router } from '@angular/router'\n\nimport { IEvent } from '../../dto/event.dto'\nimport { IPerson } from '../../dto/person.dto'\n\nimport { backendUrl } from '../../../backend.conf'\nimport { CryptoManagerService } from '../crypto-manager.service'\n\nconst httpOptions = new HttpHeaders()\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PgQueryService {\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    public cm: CryptoManagerService\n  ) {}\n\n  getAllEvents() {\n    return this.http\n      .get<Uint8Array[]>(`${backendUrl}/get_all_events`)\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  getPersonsOfEvent(eventId: number) {\n    return this.http\n      .post<Uint8Array[]>(\n        `${backendUrl}/get_event_persons`,\n        this.cm.encode({ eventId }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  getTelephonesOfPerson(personId: number) {\n    return this.http\n      .post<Uint8Array[]>(\n        `${backendUrl}/get_person_telephones`,\n        this.cm.encode({ personId }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  getTelephoneContacts(telephoneId: number) {\n    return this.http\n      .post<Uint8Array[]>(\n        `${backendUrl}/get_telephone_contacts`,\n        this.cm.encode({ telephoneId }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  setUpdatePerson(person: IPerson) {\n    return this.http\n      .post<Uint8Array>(\n        `${backendUrl}/set_update_person`,\n        this.cm.encode({ person }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  setAddEvent(event: IEvent) {\n    return this.http\n      .post<Uint8Array>(\n        `${backendUrl}/set_add_event`,\n        this.cm.encode({ event }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  setUpdateEvent(event: IEvent) {\n    return this.http\n      .post<Uint8Array>(\n        `${backendUrl}/set_update_event`,\n        this.cm.encode({ event }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  setRemoveEvent(event: IEvent) {\n    return this.http\n      .post<Uint8Array>(\n        `${backendUrl}/set_remove_event`,\n        this.cm.encode({ event }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  importEvents(importData: any) {\n    return this.http\n      .post<any>(\n        `${backendUrl}/import_events`,\n        this.cm.encode({ importData }),\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n\n  exportEvents(exportData: any) {\n    return this.http\n      .post<any>(\n        `${backendUrl}/export_events`,\n        { exportData },\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(catchError(async (err) => console.log(err)))\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { catchError } from 'rxjs/operators'\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http'\nimport { Router } from '@angular/router'\nimport { backendUrl } from '../../../backend.conf'\nimport { CryptoManagerService } from '../crypto-manager.service'\n\nconst httpOptions = new HttpHeaders()\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PgService {\n  loginState = false\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    public cm: CryptoManagerService\n  ) {}\n\n  login(loginData: any) {\n    const sub = this.http\n      .post<any>(`${backendUrl}/login`, loginData, {\n        headers: httpOptions,\n        responseType: 'json',\n      })\n      .pipe(catchError(async (err) => console.log(err)))\n      .subscribe((res) => {\n        console.log(res)\n        const { isLogged, uuid } = res\n\n        if (isLogged && uuid) {\n          this.cm.upService(uuid)\n          this.loginState = true\n\n          this.router.navigate(['main'])\n          sub.unsubscribe()\n        }\n      })\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { AlertComponent } from '../../alert/alert.component'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertManagerService {\n  component: AlertComponent\n\n  constructor() {}\n\n  success(header: string, message: string) {\n    this.component.showSuccess(header, message)\n  }\n\n  warning(header: string, message: string) {\n    this.component.showWarn(header, message)\n  }\n\n  error(header: string, message: string) {\n    this.component.showError(header, message)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport {\n  EventManagerComponent,\n  eventManagerStates,\n} from '../../modalWindows/event-manager/event-manager.component'\nimport { IEvent, emptyEvent } from '../../dto/event.dto'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventManagerService {\n  component: EventManagerComponent\n  constructor() {}\n\n  openAddEM() {\n    this.component.editableEvent = { ...emptyEvent, persons: [] }\n    this.component.emState = eventManagerStates.addMode\n    this.component.element.style.display = 'block'\n  }\n\n  openEditEM(event: IEvent) {\n    this.component.editableEvent = event\n    this.component.emState = eventManagerStates.editMode\n    this.component.element.style.display = 'block'\n  }\n}\n","import { Injectable } from '@angular/core'\nimport {\n  ImportExportManagerComponent,\n  ieManagerStates,\n} from '../../modalWindows/import-export-manager/import-export-manager.component'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImportExportService {\n  component: ImportExportManagerComponent\n  constructor() {}\n\n  openExport() {\n    this.component.iestate = ieManagerStates.exportMode\n    this.component.element.style.display = 'block'\n  }\n\n  openImport() {\n    this.component.iestate = ieManagerStates.importMode\n    this.component.element.style.display = 'block'\n  }\n}\n","import { Injectable } from '@angular/core'\nimport {\n  PersonManagerComponent,\n  personManagerStates,\n} from '../../modalWindows/person-manager/person-manager.component'\nimport { IPerson, emptyPerson } from '../../dto/person.dto'\nimport { PgQueryService } from '../pg-services/pg-query.service'\nimport { ITelephone } from '../../dto/telephone.dto'\nimport { stateFlag } from '../../dto/flag.dto'\nimport { IContact } from '../../dto/contact.dto'\nimport { PgService } from '../pg-services/pg.service'\nimport { CryptoManagerService } from '../crypto-manager.service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonManagerService {\n  component: PersonManagerComponent\n\n  constructor(\n    public pq: PgQueryService,\n    public pg: PgService,\n    public cm: CryptoManagerService\n  ) {}\n\n  openAddPM() {\n    this.component.editablePerson = { ...emptyPerson, telephones: [] }\n    this.component.pmState = personManagerStates.addMode\n    this.component.element.style.display = 'block'\n  }\n\n  openEditPM(person: IPerson) {\n    const sub = this.pq\n      .getTelephonesOfPerson(person.id)\n      .subscribe((res: Uint8Array[]) => {\n        let telephones: ITelephone[] = this.cm.decode(res).rows\n        telephones.map((tel) => {\n          tel.contacts.map((contact: IContact) => {\n            contact.state = stateFlag.isReaded\n          })\n          tel.state = stateFlag.isReaded\n        })\n        person.telephones = telephones\n\n        this.component.pmState = personManagerStates.editMode\n        this.component.editablePerson = {\n          ...person,\n          telephones: [...person.telephones],\n        }\n        this.component.element.style.display = 'block'\n\n        sub.unsubscribe()\n      })\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { SearchManagerComponent } from '../../modalWindows/search-manager/search-manager.component'\nimport { IEvent } from '../../dto/event.dto'\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { backendUrl } from '../../../backend.conf'\nimport { CryptoManagerService } from '../crypto-manager.service'\nimport { catchError, share } from 'rxjs/operators'\n\nconst httpOptions = new HttpHeaders()\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchManagerService {\n  component: SearchManagerComponent\n\n  constructor(private http: HttpClient, public cm: CryptoManagerService) {}\n\n  openSearch() {\n    this.component.element.style.display = 'block'\n  }\n\n  searchInBase(searchData: IEvent) {\n    return this.http\n      .post<any>(\n        `${backendUrl}/search`,\n        { search: this.cm.encode(searchData) },\n        { headers: httpOptions, responseType: 'json' }\n      )\n      .pipe(\n        catchError(async (err) => console.log(err)),\n        share()\n      )\n  }\n}\n","const backendOpts = {\n  backendPort: 3003,\n  backendHost: 'localhost',\n  apiRoute: 'api',\n}\n\nexport const backendUrl = `http://${backendOpts.backendHost}:${backendOpts.backendPort}/${backendOpts.apiRoute}`\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n}\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err))\n"],"sourceRoot":"webpack:///"}